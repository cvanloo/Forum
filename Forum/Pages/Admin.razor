@page "/admin/{Page?}"
@attribute [Authorize(Policy = "IsAdmin")]
@* ReSharper disable once InconsistentNaming *@
@inject  Data.InfoMessage MessageService
@* ReSharper disable once InconsistentNaming *@
@inject IDbContextFactory<Model.Database> DbContext

<style>
    textarea {
        margin-bottom: 2rem !important;
    }
</style>

<div class="container-left fix-left">
    <div class="main needs-padding">
        <ul>
            <li>
                <a href="/">&lt; Home</a>
            </li>
            <li>
                <a href="/admin/forum">Forum</a>
                <ul>
                    <li>
                        <p>Update Forum</p></li>
                    <li>
                        <p>Create Forum</p></li>
                </ul>
            </li>
            <li>
                <a href="/admin/users">Users</a>
            </li>
        </ul>
    </div>
</div>
<div class="container-middle">
    <div class="needs-padding">
        @switch (Page)
        {
            case "forum":
                <div class="main col ml-auto mr-auto text-center form-bigger">
                    <h4>Update Forum</h4>
                    <select class="form-control" @bind="_selectedForumId">
                        @foreach (var forum in _fora)
                        {
                            <option value="@forum.Id">@forum.Name</option>
                        }
                    </select>
                    @{ var selectedForum = _fora.First(f => f.Id == _selectedForumId);}
                    <p>Created: @selectedForum.Created</p>
                    <p>Membercount: @selectedForum.Members.Count</p>
                    <p>Threadcount: @selectedForum.Threads.Count</p>
                    <textarea class="form-control" @bind="_updateForumDescription" >@selectedForum.Description</textarea>
                    <div class="row">
                        <button class="accent-light btn-left" @onclick="DeleteForumAsync">Delete Forum</button>
                        <button class="accent-dark btn-right" @onclick="UpdateForumAsync">Update Forum</button>
                    </div>
                </div>

                <div class="main col ml-auto mr-auto text-center form-bigger mt-5">
                    <h4>Create Forum</h4>
                    <input type="text" placeholder="Name" @bind="_newForumName" class="form-control"/>
                    <textarea placeholder="Description" class="form-control" @bind="_newForumDescription"></textarea>
                    <div class="row">
                        <button class="accent-dark btn-bottom-left btn-right btn-left" @onclick="AddForumAsync">Add Forum</button>
                    </div>
                </div>
                break;
            case "users":
                <div class="main col ml-auto mr-auto text-center form-bigger">
                    <h4>Users: @_userCount</h4>
                    <input class="form-control" type="text" placeholder="Accountname" @bind="_searchUser" />
                    <button class="accent-dark btn-left btn-right" style="width: 100%;" @onclick="SearchUserAsync" >Search user</button>
                    @if (_selectedUser is not null)
                    {
                        <p>Accountname: @_selectedUser.AccountName</p>
                        <p>Displayname: @_selectedUser.DisplayName</p>
                        <p>Created: @_selectedUser.Created</p>
                        <div class="row">
                            <p style="display: inline-block; width: 0; flex-grow: 1; margin-bottom: 2rem; margin-top: 2rem;">Can Post</p>
                            <input style="display: inline-block; width: 0; flex-grow: 3; margin-right: 1rem; padding: 5px;" type="checkbox" @bind="@_updateSetPoster" class="form-control"/>
                        </div>
                        <div class="row">
                            <p style="display: inline-block; width: 0; flex-grow: 1; margin-bottom: 2rem; margin-top: 2rem;">Is Admin</p>
                            <input style="display: inline-block; width: 0; flex-grow: 3; margin-right: 1rem; padding: 5px;" type="checkbox" @bind="@_updateSetAdmin" class="form-control"/>
                        </div>
                        <div class="row">
                            <p style="display: inline-block; width: 0; flex-grow: 1; margin-bottom: 2rem; margin-top: 2rem;">Blocked</p>
                            <input style="display: inline-block; width: 0; flex-grow: 3; margin-right: 1rem; padding: 5px;" type="checkbox" @bind="@_updateSetBlocked" class="form-control"/>
                        </div>
                        <div class="row">
                            <button class="accent-dark btn-right btn-left" @onclick="UpdateUserAsync">Update User</button>
                        </div>
                    }
                </div>
                break;
        }
    </div>
</div>

@code {
    private List<Entity.Forum> _fora;
    private int _selectedForumId = 1;
    private string _newForumName;
    private string _newForumDescription;
    
    private string _updateForumDescription;

    private int _userCount;
    private string _searchUser;
    private Entity.User _selectedUser;
    private bool _updateSetPoster;
    private bool _updateSetAdmin;
    private bool _updateSetBlocked;
    
    [Parameter]
    public string Page { get; set; }

    /// <summary>
    /// Initializes the page.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await using var dbContext = DbContext.CreateDbContext();
        
        // NOTE(multiple include): Expensive Query!
        _fora = dbContext.Forums
            .Include(f => f.Members)
            .Include(f => f.Threads)
			.AsSplitQuery() // Divide multiple includes into multiple queries
            .ToList();

        _userCount = dbContext.Users.Count();
    }

    /// <summary>
    /// Applies user's changes to the selected forum.
    /// </summary>
    private async Task UpdateForumAsync()
    {
        await using var dbContext = DbContext.CreateDbContext();

        var forum = dbContext.Forums.First(f => f.Id == _selectedForumId);
        forum.Description = _updateForumDescription;

        try
        {
            await dbContext.SaveChangesAsync();
        }
        catch (DbUpdateException dbuEx)
        {
            await Console.Error.WriteLineAsync(dbuEx.ToString());
        
            MessageService.Message = "Could not update forum. Please reload the page and try again.";
            return;
        }
        
        MessageService.Message = "Forum updated.";
    }

    /// <summary>
    /// Deletes the selected forum.
    /// </summary>
    private async Task DeleteForumAsync()
    {
        await using var dbContext = DbContext.CreateDbContext();

        var forum = dbContext.Forums.First(f => f.Id == _selectedForumId);
        dbContext.Forums.Remove(forum);

        try
        {
            await dbContext.SaveChangesAsync();
        }
        catch (DbUpdateException dbuEx)
        {
            await Console.Error.WriteLineAsync(dbuEx.ToString());
        
            MessageService.Message = "Could not delete forum. Please reload the page and try again.";
            return;
        }
        
        MessageService.Message = "Forum deleted.";
    }
    
    /// <summary>
    /// Creates a new forum and stores it to the database.
    /// </summary>
    private async Task AddForumAsync()
    {
        await using var dbContext = DbContext.CreateDbContext();
        
        var newForum = new Entity.Forum
        {
            Name = _newForumName,
            Description = _newForumDescription
        };

        dbContext.Forums.Add(newForum);

        try
        {
            await dbContext.SaveChangesAsync();
        }
        catch (DbUpdateException dbuEx)
        {
            await Console.Error.WriteLineAsync(dbuEx.ToString());

            MessageService.Message = "Could not add forum. Please reload the page and try again.";
            return;
        }
        
        MessageService.Message = "Forum created.";
    }

    /// <summary>
    /// Searches for a user.
    /// </summary>
    private async Task SearchUserAsync()
    {
        await using var dbContext = DbContext.CreateDbContext();

        _selectedUser = dbContext.Users
            .Include(u => u.Settings)
            .FirstOrDefault(u => u.AccountName == _searchUser);
        
        if (_selectedUser is null) return;
        _updateSetPoster = _selectedUser.Settings.FirstOrDefault(s => s.SettingKey == "poster")?.Value == "True";
        _updateSetAdmin = _selectedUser.Settings.FirstOrDefault(s => s.SettingKey == "admin")?.Value == "True";
        _updateSetBlocked = _selectedUser.IsBlocked;
    }

    /// <summary>
    /// Updates users settings.
    /// </summary>
    private async Task UpdateUserAsync()
    {
        await using var dbContext = DbContext.CreateDbContext();

        // NOTE: We expect the keys to exist.
        var settingPoster = dbContext.Settings.First(s => s.SettingKey == "poster" && s.UserId == _selectedUser.Id);
        settingPoster.Value = _updateSetPoster.ToString();

        var settingAdmin = dbContext.Settings.First(s => s.SettingKey == "admin" && s.UserId == _selectedUser.Id);
        settingAdmin.Value = _updateSetAdmin.ToString();

        var userBlocked = dbContext.Users.First(u => u.Id == _selectedUser.Id);
        userBlocked.IsBlocked = _updateSetBlocked;

        try
        {
            await dbContext.SaveChangesAsync();
        }
        catch (DbUpdateException dbuEx)
        {
            await Console.Error.WriteLineAsync(dbuEx.ToString());
            
            MessageService.Message = "Could not update user settings. Please reload the page and try again.";
            return;
        }
        
        MessageService.Message = "User settings updated.";
    }
}