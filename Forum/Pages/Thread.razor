@page "/thread/{Id:int}"
@attribute [Authorize]
@using System.IO
@using Markdig.Extensions.ListExtras
@* ReSharper disable once InconsistentNaming *@
@inject NavigationManager NavMan
@* ReSharper disable once InconsistentNaming *@
@inject IJSRuntime JSRuntime
@* ReSharper disable once InconsistentNaming *@
@inject Data.InfoMessage MessageService
@* ReSharper disable once InconsistentNaming *@
@inject IDbContextFactory<Model.Database> DbContext

<div class="container-left fix-left">
	<div class="main row">
		<button class="btn-norm-sec" @onclick='() => NavMan.NavigateTo("/")'>
			<img width="50" height="50" src="/css/icons/Arrow_Back.png" alt="Back Arrow" />
			Go Back
		</button>
	</div>
</div>
@* NOTE: '==' and '!=' call the equality operator _which can be overridden_:
 *     public static bool operator ==(<object> a, <object> b) { } 
 * 'is' and 'is not' load the values on the stack and do a simple bit-by-bit
 * comparison, which is more efficient and cannot lie to you.
 *@
@if (_thread is not null)
{
	<div class="container-middle" style="overflow: hidden;">
		<div class="main needs-padding">
			<p class="p-annotation-sm">
				<a href="/user/@_thread.Creator.AccountName">@_thread.Creator.AccountName</a>
				@@@_thread.Forum.Name
				@_thread.Created.ToString("t"), @_thread.Created.ToString("d")
			</p>
			<h5>@_thread?.Title</h5>
			<hr />
			<MarkdownView Content="@_content" />
			@*<pre class="txt-title">@renderedContent</pre>*@
			@{
				var tagText = "";
				// ReSharper disable once LoopCanBeConvertedToQuery
				foreach (var t in _thread.Tags)
				{
					tagText += ' ' + t.Name;
				}
			}
			<small>Tags: @tagText</small>
		</div>
		<div class="main row">
			@* Number of Pages, 20 Comments per Page
		     * ( number_of_comments + comments_per_page - 1 ) / comments_per_page
		     *@
			@*<p class="p-annotation-sm needs-space-lr">@_thread.Comments.Count Comments (@((_thread.Comments.Count + 19) / 20) Pages)</p>*@
			<p class="p-annotation-sm needs-space-lr">@_thread.Comments.Count Comment(s)</p>
			<p @onclick="CopyLinkAsync" class="p-annotation-sm needs-space-lr clickable shiny">@_copyLabel</p>
			<p @onclick="SaveThreadAsync" class="p-annotation-sm needs-space-lr clickable shiny">@(_saved ? "Saved!" : "Save")</p>
			@{
				var dbContext = DbContext.CreateDbContext();
				var thread = dbContext.Threads
					.Include(t => t.Creator)
					.First(t => t.Id == _thread.Id);
			}
			@if (!thread.IsDeleted &&
			     thread.Creator == dbContext.Users.First(u => u.AccountName == _authState.User.Identity.Name))
			{
				<p @onclick="DeleteThreadAsync" class="p-annotation-sm needs-space-lr clickable shiny">Delete</p>
			}
			@{ dbContext.Dispose(); }
		</div>
		<div class="main">
			<CommentField Thread="@_thread" UpdateHandler="UpdatePageAsync"/>
		</div>
		@foreach (var c in _thread.Comments)
		{
			if (c.Parent is not null) continue;

			<Comment CommentModel="c" UpdateHandler="UpdatePageAsync"/>
		}
	</div>
	<div class="container-right fix-right">
		<div class="main needs-padding">
			<img width="100" height="100" src="/css/icons/Default.jpg" alt="Forum Image" />
			@{
				var forumName = _thread.Forum.Name;
				if (_thread.Forum.IsDeleted)
				{
					forumName += " [Deleted]";
				}
			}
			<h5>@forumName</h5>
			<p class="p-annotation-sm">@_thread.Forum.Members.Count Mem. / Created @_thread.Forum.Created.ToString("d")</p>
			<pre style="color: #ebdbb2;">@_thread.Forum.Description</pre>
			@{ var followText = _followsForum ? "Unfollow" : "Follow"; }
			<button class="btn-col-light btn-norm" style="width: 100%" @onclick="FollowForumAsync">@followText</button>
		</div>
	</div>
}
else
{
	<div class="container-middle">
		<div class="main needs-padding">
			<h5>Thread not found.</h5>
            <p>Thread @Id doesn't seem to exist.</p>
		</div>
	</div>
}

@code {
	private string _copyLabel = "Copy Link";
	private string _content;
	private bool _saved;
	private bool _followsForum;
	
	private Entity.Thread _thread;
	private AuthenticationState _authState;

	[Parameter]
	public int Id { get; set; }

	[CascadingParameter]
	private Task<AuthenticationState> AuthenticationStateTask { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await UpdatePageAsync();
	}

	/// <summary>
	/// Copies the path to the thread into the users clipboard.
	/// </summary>
	private async Task CopyLinkAsync()
	{
		var link = NavMan.Uri;
		await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", link);
		_copyLabel = "Copied!";
	}

	/// <summary>
	/// Adds the thread to the users saved threads.
	/// </summary>
	private async Task SaveThreadAsync()
	{
		await using var dbContext = DbContext.CreateDbContext();
		
		var user = dbContext.Users
			.Include(u => u.SavedThreads)
			.Include(u => u.Forums)
			.AsSplitQuery()
			.First(u => u.AccountName == _authState.User.Identity.Name);

		// Get the thread from the same db context
		var thread = dbContext.Threads.First(t => t.Id == _thread.Id);
		
		if (_saved)
		{
			user.SavedThreads.Remove(thread);
			_saved = false;
		}
		else
		{
			user.SavedThreads.Add(thread);
			_saved = true;
		}
		
		try
		{
			await dbContext.SaveChangesAsync();
		}
		catch (DbUpdateException dbuEx)
		{
			await Console.Error.WriteLineAsync(dbuEx.ToString());
		}

		StateHasChanged();
	}

	/// <summary>
	/// Subscribes the user to the forum.
	/// </summary>
	private async Task FollowForumAsync()
	{
		await using var dbContext = DbContext.CreateDbContext();
		
		var user = dbContext.Users
			.Include(u => u.Forums)
			.First(u => u.AccountName == _authState.User.Identity.Name);
		
		// Get the forum from the same db context
		var forum = dbContext.Forums.First(f => f.Id == _thread.Forum.Id);

		if (_followsForum)
		{ // Unfollow
			user.Forums.Remove(forum);
			_followsForum = false;
		}
		else
		{ // Follow
			user.Forums.Add(forum);
			_followsForum = true;
		}

		try
		{
			await dbContext.SaveChangesAsync();
		}
		catch (DbUpdateException dbuEx)
		{
			await Console.Error.WriteLineAsync(dbuEx.ToString());
		}
	}

	/// <summary>
	/// Deletes the post.
	/// </summary>
	private async Task DeleteThreadAsync()
	{
		await using var dbContext = DbContext.CreateDbContext();

		var thread = dbContext.Threads
			.Include(t => t.Creator)
			.First(t => t.Id == _thread.Id);
		if (thread.Creator != dbContext.Users.First(u => u.AccountName == _authState.User.Identity.Name)) return;
		
		var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Delete this thread?");

		// ReSharper disable once InvertIf
		if (confirm) 
		{ 
			thread.IsDeleted = true;

			try
			{
				await dbContext.SaveChangesAsync();

				// Delete the text file too
				File.Delete(thread.ContentPath);
			}
			catch (DbUpdateException dbuEx)
			{
				await Console.Error.WriteLineAsync(dbuEx.ToString());

				MessageService.Message = "Could not delete thread. Please reload the page and try again.";
				return;
			}
			catch (Exception ex)
			{
				await Console.Error.WriteLineAsync(ex.ToString());
			}

			MessageService.Message = "Thread deleted.";
		}
	}

	/// <summary>
	/// Updates the page.
	/// </summary>
	private async Task UpdatePageAsync()
	{
		await using var dbContext = DbContext.CreateDbContext();

		_authState = await AuthenticationStateTask;

		// NOTE(multiple include): Expensive query!
		_thread = await dbContext.Threads
			.Include(t => t.Creator)
			.Include(t => t.Tags)
			.Include(t => t.Forum)
				.ThenInclude(f => f.Members)
			.Include(t => t.Comments)
			//.Include(t => t.Comments.OrderByDescending(c => c.Created))
				.ThenInclude(c => c.Creator)
			.AsSplitQuery() // Divide multiple includes into multiple queries
			.FirstOrDefaultAsync(t => t.Id == Id);

		if (_thread is null) return;

		if (_thread.IsDeleted)
		{
			_content = "[ Thread deleted. ]";
		}
		else
		{
			try
			{
				var path = _thread.ContentPath;
				var streamReader = new StreamReader(path);
				_content = await streamReader.ReadToEndAsync();
				streamReader.Close();
			}
			catch (Exception)
			{
				_content = "[ An error occurred. ]";
			}
		}

		// NOTE(multiple include): Expensive query!
		var user = await dbContext.Users
			.Include(u => u.SavedThreads)
			.Include(u => u.Forums)
			.AsSplitQuery() // Divide multiple includes into multiple queries
			.FirstAsync(u => u.AccountName == _authState.User.Identity.Name);

		_saved = user.SavedThreads.Contains(_thread);
		_followsForum = user.Forums.Contains(_thread.Forum);
		
		StateHasChanged();
	}
}
