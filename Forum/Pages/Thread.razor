@page "/thread/{Id:int?}"
@attribute [Authorize]
@using Microsoft.EntityFrameworkCore
@using System.IO
@inject IDbContextFactory<Model.Database> DbContext
@inject NavigationManager NavMan
@inject IJSRuntime iJsRuntime

<div class="container-left" >
	<div class="main row" >
		<button class="btn-norm-sec" @onclick="NavHome">
			<img width="50" height="50" src="/css/icons/Arrow_Back.png" alt="Back Arrow" />
			Go Back
		</button>
	</div>
</div>
<div class="container-middle" >
	<div class="main needs-padding">
		<p class="p-annotation-sm">
			@_thread.Creator.AccountName@@@_thread.Forum.Name
			@_thread.Created.ToString("t"), @_thread.Created.ToString("d")
		</p>
		<h5 class="txt-title">@_thread.Title</h5>
		<pre class="txt-title">@_content</pre>
	</div>
	<div class="second row">
		<p class="p-annotation-sm txt-dark needs-space-lr">@_thread.Comments.Count Comments (@(_thread.Comments.Count / 20) Pages)</p>
		<p @onclick="CopyLink" class="p-annotation-sm txt-dark needs-space-lr clickable shiny">@_copyLabel</p>
		<p @onclick="SaveThread" class="p-annotation-sm txt-dark needs-space-lr clickable shiny">@(_saved ? "Saved!" : "Save")</p>
	</div>
	<div class="main">
		<CommentField ThreadId="@_thread.Id"/>
	</div>
	@foreach (Entity.Comment c in _comments)
	{
		if (null != c.Parent) continue;

		<Comment CommentModel="c" />
	}
</div>
<div class="container-right" >
	<div class="second needs-padding" >
		<img width="100" height="100" src="/css/icons/Default.jpg" alt="Forum Image"/>
		<h5>@_thread.Forum.Name</h5>
		<p class="p-annotation-sm">@_thread.Forum.Members.Count Mem. / Created @_thread.Forum.Created.ToString("d")</p>
		<pre class="txt-title">@_thread.Forum.Description</pre>
	</div>
</div>

@code {
	[Parameter]
	public int Id { get; set; }

	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }

	private string _copyLabel = "Copy Link";
	private Entity.Thread _thread;
	private string _content;
	private bool _saved;
	private List<Entity.Comment> _comments;

	protected async override Task OnInitializedAsync()
	{
		using var db = DbContext.CreateDbContext();

		_thread = db.Threads
			.Include(t => t.Creator)
			.Include(t => t.Forum)
				.ThenInclude(f => f.Members)
			.Include(t => t.Comments)
				.ThenInclude(c => c.Creator)
			.FirstOrDefault(t => t.Id == Id);

		_comments = _thread.Comments.ToList();

		var authenticationState = await authenticationStateTask;
		Entity.User user = db.Users.Include(u => u.SavedThreads).First(u => u.AccountName == authenticationState.User.Identity.Name);
		_saved = user.SavedThreads.Contains(_thread);

		if (!string.IsNullOrEmpty(_thread.ContentPath))
		{
			string path = _thread.ContentPath;
			StreamReader streamReader = new StreamReader(path);

			_content = streamReader.ReadToEnd();
		}
	}

	private void NavHome()
	{
		NavMan.NavigateTo("/");
	}

	private async void CopyLink()
	{
		_copyLabel = "Copied!";
		string link = NavMan.Uri;
		await iJsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", link);
	}

	private async void SaveThread()
	{
		using var db = DbContext.CreateDbContext();

		var authenticationState = await authenticationStateTask;

		Entity.User user = db.Users
			.Include(u => u.SavedThreads)
			.Include(u => u.Forums)
			.First(u => u.AccountName == authenticationState.User.Identity.Name);

		// Get the thread again, because it needs to come from the _same_ db-context.
		// Using `_thread` would not work.
		Entity.Thread thread = db.Threads.First(t => t.Id == _thread.Id);

		if (_saved)
		{
			user.SavedThreads.Remove(thread);
		}
		else
		{
			user.SavedThreads.Add(thread);
		}

		await db.SaveChangesAsync();

		_saved = !_saved;
		StateHasChanged();
	}
}
