@page "/login"
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavigationManager
@inject IMailService MailService

<div class="main text-center mt-5 ml-auto mr-auto">
	<AuthorizeView>
		<NotAuthorized Context="Auth">
			<EditForm OnValidSubmit="SignIn" Model="_loginModel">
				<DataAnnotationsValidator />
				<div class="col">
					<h3 class="mt-2">Login</h3>
					<div class="relative-span">
						<InputText class="form-control" type="text" placeholder="Username / Email" @bind-Value="_loginModel.Identifier" />
						<ValidationMessage For="() => _loginModel.Identifier" />
					</div>
					<div class="relative-span">
						<InputText class="form-control" type="password" placeholder="Password" @bind-Value="_loginModel.Password" />
						<ValidationMessage For="() => _loginModel.Password" />
					</div>
					<div class="row">
						<button type="button" class="accent-red btn-bottom-left" @onclick="NavPwReset">Forgot Password</button>
						<button type="button" class="accent-blue" @onclick="NavRegister">Create Account</button>
						<button type="submit" class="accent-green btn-bottom-right">Log In</button>
					</div>
				</div>
			</EditForm>
		</NotAuthorized>
		<Authorized>
			<div class="form-sim">
				<div class="col">
					<h3 class="mt-2">Logout</h3>
					<p>Confirm logout.</p>
					<div class="row">
						<button @onclick="NavHome" class="accent-blue btn-bottom-left">Home</button>
						<button class="accent-green btn-bottom-right" @onclick="LogOut">Log Out</button>
					</div>
				</div>
			</div>
		</Authorized>
	</AuthorizeView>
</div>

@code {
	private readonly LoginModel _loginModel = new();

	[CascadingParameter]
	private Task<AuthenticationState> AuthenticationStateTask { get; set; }

	private async Task SignIn()
	{
		if (!string.IsNullOrEmpty(_loginModel.Identifier) &&
			!string.IsNullOrEmpty(_loginModel.Password))
		{
			try
			{
				await ((Forum.Controller.AuthenticationStateController)AuthProvider)
					.ValidateLogin(_loginModel.Identifier, _loginModel.Password);

				// TODO: Display info "You are now logged in."

				var uriBuilder = new UriBuilder(NavigationManager.Uri);
				var url = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
				var returnUrl = url["returnUrl"] ?? "/";
				var regex = new Regex(".*:?//");
				if (!regex.IsMatch(returnUrl))
					NavigationManager.NavigateTo(returnUrl);
			}
			catch (Exception ex)
			{
				// TODO: Display info "Login failed."
			}
		}
	}

	private async Task LogOut()
	{
		await ((Forum.Controller.AuthenticationStateController)AuthProvider).Logout();
	}

	private void NavPwReset()
	{
		NavigationManager.NavigateTo("/pwreset"); // TODO: use <a href />
	}

	private void NavRegister()
	{
		NavigationManager.NavigateTo("/register"); // TODO: use <a href />
	}

	private void NavHome()
	{
		NavigationManager.NavigateTo("/"); // TODO: use <a href />
	}

	public class LoginModel
	{
		[Required(ErrorMessage = "Enter an Email address or Accountname.")]
		public string Identifier { get; set; }
		[Required]
		public string Password { get; set; }
	}
}
