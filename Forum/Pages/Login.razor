@page "/login"
@using Microsoft.EntityFrameworkCore;
@using System.Security.Claims;
@using System.ComponentModel.DataAnnotations;
@inject IDbContextFactory<Model.Database> DbContext;
@inject AuthenticationStateProvider AuthProvider;
@inject NavigationManager NavigationManager;

<div class="main text-center mt-5 ml-auto mr-auto">
	<AuthorizeView>
		<NotAuthorized>
			<form @onsubmit="SignIn">
				<div class="col">
					<h3 class="mt-2">Login</h3>
					<input class="form-control" type="text" placeholder="Username / Email" @bind-value="_loginModel.Identifier" />
					<input class="form-control" type="password" placeholder="Password" @bind-value="_loginModel.Password" />
					<div class="row">
						<button type="button" class="accent-red btn-bottom-left" @onclick="NavPwReset">Forgot Password</button>
						<button type="button" class="accent-blue" @onclick="NavRegister">Create Account</button>
						<button type="submit" class="accent-green btn-bottom-right" @onclick="SignIn">Log In</button>
					</div>
				</div>
			</form>
		</NotAuthorized>
		<Authorized>
			<div class="form-sim">
				<div class="col">
					<h3 class="mt-2">Logout</h3>
					<p>Confirm logout.</p>
					<div class="row">
						<button @onclick="NavHome" class="accent-blue btn-bottom-left">Home</button>
						<button class="accent-green btn-bottom-right" @onclick="LogOut">Log Out</button>
					</div>
				</div>
			</div>
		</Authorized>
	</AuthorizeView>
</div>

@code {
	private LoginModel _loginModel = new LoginModel();
	private string _message;

	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }

	private async Task SignIn()
	{
		if (!string.IsNullOrEmpty(_loginModel.Identifier) && !string.IsNullOrEmpty(_loginModel.Password))
		{
			try
			{
				await ((Forum.Controller.AuthenticationStateController)AuthProvider).ValidateLogin(_loginModel.Identifier, _loginModel.Password);
			}
			catch (Exception ex)
			{
				_message = ex.Message;
			}

			_loginModel = new LoginModel();
		}
	}

	private async Task LogOut()
	{
		await ((Forum.Controller.AuthenticationStateController)AuthProvider).Logout();
	}

	private void NavPwReset()
	{
		NavigationManager.NavigateTo("/pwreset");
	}

	private void NavRegister()
	{
		NavigationManager.NavigateTo("/register");
	}

	private void NavHome()
	{
		NavigationManager.NavigateTo("/");
	}

	//private async Task SetSessionVar()
	//{
	//	using var db = DbContext.CreateDbContext();

	//	var authenticationState = await authenticationStateTask;

	//	string username = authenticationState.User.Identity.Name;

	//	var user = db.Sessions.Include(s => s.User).Where(s => s.User.AccountName == username).FirstOrDefault().User;

	//	var session = new Entity.Session()
	//	{
	//		UserId = user.Id,
	//		Identifier = "Test",
	//		Value = "tseT"
	//	};

	//	db.Sessions.Add(session);
	//	db.SaveChanges();
	//}

	public class LoginModel
	{
		[Required]
		public string Identifier { get; set; }
		[Required]
		public string Password { get; set; }
	}
}
