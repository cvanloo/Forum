@page "/login"
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@* ReSharper disable once InconsistentNaming *@
@inject AuthenticationStateProvider AuthProvider
@* ReSharper disable once InconsistentNaming *@
@inject NavigationManager NavMan
@* ReSharper disable once InconsistentNaming *@
@inject IMailService MailService
@* ReSharper disable once InconsistentNaming *@
@inject Data.InfoMessage MessageService

<div class="main text-center mt-5 ml-auto mr-auto">
	<AuthorizeView>
		@* ReSharper disable once UnusedParameter.Local*@
		<NotAuthorized Context="auth">
			<EditForm OnValidSubmit="SignInAsync" Model="_loginModel">
				<DataAnnotationsValidator />
				<div class="col">
					<h3 class="mt-2">Login</h3>
					<div class="relative-span">
						<InputText class="form-control" type="text" placeholder="Username / Email" @bind-Value="_loginModel.Identifier" />
						<ValidationMessage For="() => _loginModel.Identifier" />
					</div>
					<div class="relative-span">
						<InputText class="form-control" type="password" placeholder="Password" @bind-Value="_loginModel.Password" />
						<ValidationMessage For="() => _loginModel.Password" />
					</div>
					@*<label>Remember Me<InputCheckbox style="margin: 1em;" type="checkbox" @bind-Value="_loginModel.RememberMe"/></label>*@
					<div class="row">
						<button type="button" class="btn-col-dark accent-light btn-left" @onclick='() => NavMan.NavigateTo("/pwreset")'>Forgot Password</button>
						<button type="button" class="btn-col-dark accent-light" @onclick='() => NavMan.NavigateTo("/register")'>Create Account</button>
						<button type="submit" class="btn-col-dark accent-dark btn-right">Log In</button>
					</div>
				</div>
			</EditForm>
		</NotAuthorized>
		<Authorized>
			<div class="form-sim">
				<div class="col">
					<h3 class="mt-2">Logout</h3>
					<p>Confirm logout.</p>
					<div class="row">
						<button @onclick='() => NavMan.NavigateTo("/")' class="btn-col-dark accent-light btn-left">Home</button>
						<button class="btn-col-dark accent-dark btn-right" @onclick="LogOutAsync">Log Out</button>
					</div>
				</div>
			</div>
		</Authorized>
	</AuthorizeView>
</div>

@code {
	private readonly LoginModel _loginModel = new();

	[CascadingParameter]
	private Task<AuthenticationState> AuthenticationStateTask { get; set; }

	/// <summary>
	/// Log user in.
	/// </summary>
	private async Task SignInAsync()
	{
		try
		{
			await ((Forum.Controller.AuthenticationStateController) AuthProvider)
				.ValidateLogin(_loginModel.Identifier, _loginModel.Password);

			MessageService.Message = "You are now logged in.";

			var uriBuilder = new UriBuilder(NavMan.Uri);
			var url = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
			var returnUrl = url["returnUrl"] ?? "/";
			
			// Validate url, NOTE: Good enough ¯\_(ツ)_/¯
			var regex = new Regex(".*:?//");
			if (regex.IsMatch(returnUrl))
				returnUrl = "/";
			
			NavMan.NavigateTo(returnUrl);
		}
		catch (UserService.LoginException lEx)
		{
			await Console.Error.WriteLineAsync(lEx.ToString());
			await Console.Error.WriteLineAsync(lEx.Message);
			
			MessageService.Message = "Login failed.";
		}
	}

	/// <summary>
	/// Log user out.
	/// </summary>
	private async Task LogOutAsync()
	{
		await ((Forum.Controller.AuthenticationStateController)AuthProvider).Logout();
	}

	public class LoginModel
	{
		[Required(ErrorMessage = "Enter an Email address or Accountname.")]
		public string Identifier { get; set; }
		
		[Required]
		public string Password { get; set; }

		[Required]
		public bool RememberMe { get; set; } = false;
	}
}
