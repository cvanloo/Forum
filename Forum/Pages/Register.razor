@page "/register"
@using BCrypt.Net;
@using Microsoft.EntityFrameworkCore; 
@using Forum.Entity;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.Extensions.Configuration 
@inject IDbContextFactory<Model.Database> DbContext
@inject NavigationManager NavigationManager 
@inject NavigationManager NavMan 
@inject IConfiguration Config

<div class="main text-center mt-5 ml-auto mr-auto form-sim">
	<div class="col">
		<h3 class="mt-2">Create Account</h3>
		<input class="form-control" type="text" @bind-value="_registerModel.AccountName" placeholder="Account Name" />
		<input class="form-control" type="email" @bind-value="_registerModel.Email" placeholder="Email Address" />
		<input class="form-control" type="password" @bind-value="_registerModel.Password" placeholder="Password" />
		<input class="form-control" type="password" @bind-value="_registerModel.RepeatPassword" placeholder="Repeat Password" />
		<div class="row">
			<button type="button" class="accent-blue btn-bottom-left btn-grow-large" @onclick="NavLogin">Already have an account?</button>
			<button type="submit" class="accent-green btn-bottom-right" @onclick="HashPw">Register</button>
		</div>
	</div>
</div>

@code {
	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }

	private RegisterModel _registerModel = new RegisterModel();

	private string _message;

	protected async override Task OnInitializedAsync()
	{
		var authenticationState = await authenticationStateTask;

		if (authenticationState.User.Identity.IsAuthenticated)
		{
			NavigationManager.NavigateTo("/");
		}
	}

	private async Task HashPw()
	{
		string pwHash = BCrypt.EnhancedHashPassword(_registerModel.Password, Config.GetValue<int>("Workfactor"));

		using var db = DbContext.CreateDbContext();

		if (db.Users.Where(u => u.AccountName == _registerModel.AccountName).Any())
		{
			_message = "Username already exists.";
			return;
		}

		if (db.Users.Where(u => u.Email == _registerModel.Email).Any())
		{
			_message = "There already is an account with this email address.";
			return;
		}

		User user = new User()
		{
			AccountName = _registerModel.AccountName,
			Email = _registerModel.Email,
			PwHash = pwHash
		};

		try
		{
			await db.Users.AddAsync(user);
			await db.SaveChangesAsync();

			NavigationManager.NavigateTo("/login");
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}

	private void NavLogin()
	{
		NavMan.NavigateTo("/login");
	}

	public class RegisterModel
	{
		[Required]
		public string AccountName { get; set; }

		public string DisplayName { get; set; }

		[Required]
		public string Email { get; set; }

		[Required]
		public string Password { get; set; }

		[Required]
		[Compare(nameof(Password), ErrorMessage = "Passwords don't match.")]
		public string RepeatPassword { get; set; }
	}
}
