@page "/register"
@using BCrypt.Net;
@using System.ComponentModel.DataAnnotations;
@using Forum.Entity
@using Forum.Model
@using Microsoft.Extensions.Configuration 
@* ReSharper disable once InconsistentNaming *@
@inject NavigationManager NavigationManager 
@* ReSharper disable once InconsistentNaming *@
@inject NavigationManager NavMan 
@* ReSharper disable once InconsistentNaming *@
@inject IConfiguration Config
@* ReSharper disable once InconsistentNaming *@
@inject Data.InfoMessage MessageService
@* ReSharper disable once InconsistentNaming *@
@inject Data.IMailService MailService
@* ReSharper disable once InconsistentNaming *@
@inject IDbContextFactory<Model.Database> DbContext

<div class="main text-center mt-5 ml-auto mr-auto form-bigger">
	<EditForm class="form-bigger" Model="@_registerModel" OnValidSubmit="CreateAccountAsync">
		<DataAnnotationsValidator/>
		@*<ValidationSummary />*@
		<div class="col">
			<h3 class="mt-2">Create Account</h3>
			<div class="relative-span">
				<InputText class="form-control" type="text" @bind-Value="_registerModel.AccountName" placeholder="Account Name"/>
				<ValidationMessage For="() => _registerModel.AccountName"/>
			</div>
			<div class="relative-span">
				<InputText class="form-control" type="email" @bind-Value="_registerModel.Email" placeholder="Email Address"/>
				<ValidationMessage For="() => _registerModel.Email"/>
			</div>
			<div class="relative-span">
				<InputText class="form-control" type="password" @bind-Value="_registerModel.Password" placeholder="Password"/>
				<ValidationMessage For="() => _registerModel.Password"/>
			</div>
			<div class="relative-span">
				<InputText class="form-control" type="password" @bind-Value="_registerModel.RepeatPassword" placeholder="Repeat Password"/>
				<ValidationMessage For="() => _registerModel.RepeatPassword"/>
			</div>
			<div class="row">
				<button type="button" class="btn-col-dark accent-light btn-left btn-grow-large" @onclick='() => NavMan.NavigateTo("/login")'>Already have an account?</button>
				<button type="submit" class="btn-col-dark accent-dark btn-right">Register</button>
			</div>
		</div>
	</EditForm>
</div>

@code {
	private readonly RegisterModel _registerModel = new();

	[CascadingParameter]
	private Task<AuthenticationState> AuthenticationStateTask { get; set; }

	///// <summary>
	///// Initializes the page.
	///// </summary>
	//protected override async Task OnInitializedAsync()
	//{ }

	/// <summary>
	/// Crates a new account.
	/// </summary>
	private async Task CreateAccountAsync()
	{
		await using var dbContext = DbContext.CreateDbContext();
		
		var pwHash = BCrypt.EnhancedHashPassword(
			_registerModel.Password,
			Config.GetValue<int>("Workfactor"));

		if (dbContext.Users.Any(u => u.AccountName == _registerModel.AccountName))
		{
			MessageService.Message = "Username already exists.";
			return;
		}

		if (dbContext.Users.Any(u => u.Email == _registerModel.Email))
		{
			MessageService.Message = "There already is an account with this email address.";
			return;
		}

		var user = new Entity.User
		{
			AccountName = _registerModel.AccountName,
			Email = _registerModel.Email,
			PwHash = pwHash,
			Settings = SetupSettings()
		};

		await dbContext.Users.AddAsync(user);
		
		try
		{
			await dbContext.SaveChangesAsync();
		}
		catch (DbUpdateException dbuEx)
		{
			await Console.Error.WriteLineAsync(dbuEx.ToString());
		}

		await MailService.SendAsync(new Message()
		{
			Body = "Account created successfully.",
			From = "sender@domaine.ch",
			Subject = "Account creation",
			To = new[] { user.Email }
		});
		
		MessageService.Message = "Account created successfully.";
        NavigationManager.NavigateTo("/login");
	}

	/// <summary>
	/// Sets up the default account settings.
	/// </summary>
	private static List<Setting> SetupSettings()
	{
		// Default account settings
		var settings = new List<Setting>()
		{
			new () { SettingKey = "poster", Value = "True" },
			new () { SettingKey = "admin", Value = "False" }
		};

		return settings;
	}

	public class RegisterModel
	{
		[Required(ErrorMessage = "The 'Account Name' field is required.")]
		[RegularExpression(@"^(?!.*@).*$", ErrorMessage = "Accountname can't contain '@'.")]
		public string AccountName { get; set; }

		public string DisplayName { get; set; }

		[Required(ErrorMessage = "The 'Email' field is required.")]
		[RegularExpression(@"^.+@.+$", ErrorMessage = "Not a valid Email address.")]
		public string Email { get; set; }

		[Required(ErrorMessage = "The 'Password' field is required.")]
		public string Password { get; set; }

		[Required(ErrorMessage = "The 'Repeat Password' field is required.")]
		[Compare(nameof(Password), ErrorMessage = "Passwords don't match.")]
		public string RepeatPassword { get; set; }
	}
}