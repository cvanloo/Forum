@page "/"
@attribute [Authorize(Roles = "user")]
@using System.Web
@* ReSharper disable once InconsistentNaming *@
@inject NavigationManager NavMan
@* ReSharper disable once InconsistentNaming *@
@inject IDbContextFactory<Model.Database> DbContext
@implements IDisposable

<AuthorizeView>
	<Authorized>
		<div class="container-left fix-left">
			<div class="main needs-padding">
				@* <img width="50" height="50" src="/css/icons/Default.jpg" alt="Profile Image" /> *@
				<h4>Hello, @_displayName</h4>
				<p>Logged in as: @_accountName</p>
				<div class="row btn-select">
					<button @onclick='() => NavMan.NavigateTo("/")' class="btn-col-light btn-hover-accent btn-left">Home</button>
					<button @onclick='() => NavMan.NavigateTo("/login")' class="btn-col-light btn-hover-accent btn-right">Logout</button>
				</div>
                </div>
			<div class="main row">
				<button @onclick='() => NavMan.NavigateTo("/post")' class="btn-col-light btn-norm btn-hover-accent" style="margin: auto 0.5rem;">Start a Thread</button>
			</div>
			<div>
				<a href="/pref">
					<img width="50" height="50" src="/css/icons/Settings.png" alt="Settings Image" />
					Preferences
				</a>
			</div>
			@*<div class="">
				<p class="p-annotation-sm">Bottom</p>
			</div>*@
		</div>
		<div class="container-middle">
			<div class="main">
				@foreach (var thread in _threads)
				{
					<ThreadPreview ThreadModel="thread" />
				}
				<button @onclick="LoadMoreAsync" style="width: 100%;" class="btn-col-light btn-norm">Load more</button>
			</div>
		</div>
		<div class="container-right fix-right">
			<div class="main needs-padding">
				<p>Sort by:</p>
                <div class="row btn-select">
                	<button @onclick="SortByNewAsync" class="btn-col-light btn-hover-accent btn-left @(_sortBy == Model.SearchQuery.SortOrder.NewestFirst ? "btn-active" : "")">New</button>
                	<button @onclick="SortByOldAsync" class="btn-col-light btn-hover-accent btn-right @(_sortBy == Model.SearchQuery.SortOrder.OldestFirst ? "btn-active" : "")">Old</button>
                </div>
                <button @onclick="ShowSavedAsync" class="btn-col-light btn-hover-accent btn-right btn-left @(_savedOnly ? "btn-active" : "")" style="width: 100%; @(_savedOnly ? "background: #98971A;" : "")" >Saved Threads</button>
			</div>
			<div class="main row">
				<form @onsubmit="NavSearch">
					<input @bind-value="_searchQuery" id="search_bar" class="input-fg needs-padding" type="text" placeholder="Search @@User, #Tags or Posts"/>
				</form>
			</div>
			<div class="main needs-padding">
				<TrendingNow />
			</div>
		</div>
	</Authorized>
</AuthorizeView>

@code {
	private string _displayName;
	private string _accountName;
	private string _searchQuery;
	private bool _savedOnly;
	private Model.SearchQuery.SortOrder _sortBy = Model.SearchQuery.SortOrder.NewestFirst;
	private List<Entity.Thread> _threads = new(); // TODO: IQueryable, lazy loading

	private Model.SearchQueryBuilder _cachedQueryBuilder;
	
	// Stores our anonymous event handler to give us the possibility to unsubscribe it on dispose.
	private EventHandler<LocationChangedEventArgs> _locationChangedHandler;
	
	[CascadingParameter]
	private Task<AuthenticationState> AuthenticationStateTask { get; set; }

	/// Get the search query.
	private string SearchQuery
	{
		get
		{
			var uriBuilder = new UriBuilder(NavMan.Uri);
			var q = HttpUtility.ParseQueryString(uriBuilder.Query);
			return q["q"];
		}
	}
	
	/// <summary>
	/// Initializes the page.
	/// </summary>
	protected override async Task OnInitializedAsync()
	{
		await using var dbContext = DbContext.CreateDbContext();
		var authState = await AuthenticationStateTask;

		var user = dbContext.Users.First(u => u.AccountName == authState.User.Identity.Name);
		
		_displayName = user.DisplayName;
		_accountName = user.AccountName;

		_locationChangedHandler = (_, _) =>
		{
			InvokeAsync(UpdatePageAsync);
			StateHasChanged();
		};

		// When the navigation changes from one page to the exact same page (only parameters may be different)
		// `OnInitialized` is not called again. Instead we need to listen for the `LocationChanged`-event.
		NavMan.LocationChanged += _locationChangedHandler; 
		
		await UpdatePageAsync();
	}

	/// <summary>
	/// Update the page.
	/// </summary>
	private async Task UpdatePageAsync()
	{
		var query = SearchQuery;
		_threads.Clear(); // New search query, delete old results first

		await SearchAsync(query);
	}

	/// <summary>
	/// Loads more threads.
	/// </summary>
	private async Task LoadMoreAsync()
	{
		if (!_threads.Any()) return;
		
		// Don't create the query again, reuse the old one
		await using var dbContext = DbContext.CreateDbContext();
		
		// Update the timestamp
		_cachedQueryBuilder.StartAtTimestamp(_threads.Last().Created);
		
		var result = _cachedQueryBuilder.Build().Construct(dbContext);
		_threads.AddRange(result.Take(20).ToList()); // Query is evaluated here
	}

	/// <summary>
	/// Queries and retrieves the searched elements from the database.
	/// </summary>
	/// <param name="query">Search query</param>
	private async Task SearchAsync(string query)
	{
		await using var dbContext = DbContext.CreateDbContext();
		
		var searchBuilder = new Model.SearchQueryBuilder();
		searchBuilder.SortBy(_sortBy);

		if (_savedOnly)
		{
			var authState = await AuthenticationStateTask;
			var user = dbContext.Users
				.Include(u => u.SavedThreads)
				.First(u => u.AccountName == authState.User.Identity.Name);

			searchBuilder.SavedOnly(user);
		}

		if (string.IsNullOrWhiteSpace(query)) goto exit;
		
		switch (query[0])
		{
			case '#':
				var tags = Entity.Tag.ParseTags(dbContext, query[1..]);
				foreach (var t in tags)
				{
					searchBuilder.AddQueryTag(t);
				}
				break;
			case '@':
				var qName = query[1..];
				var users = dbContext.Users.Where(u => u.AccountName.ToLower().Contains(qName.ToLower()));
				foreach (var u in users)
				{
					searchBuilder.AddQueryUser(u);
				}
				break;
			default:
				searchBuilder.AddQueryTitle(query);
				break;
		}
		
	exit:
		_cachedQueryBuilder = searchBuilder;
		var result = searchBuilder.Build().Construct(dbContext);
		_threads = result.Take(20).ToList(); // Query is only evaluated here.
	}
	
	/// <summary>
	/// Update url with search query.
	/// </summary>
	private void NavSearch()
	{
		// ReSharper disable once InconsistentNaming
		string targetURI;

		if (string.IsNullOrWhiteSpace(_searchQuery))
		{
			targetURI = "/";
		}
		else
		{
			// Everything inside an URI after an '#' counts as a "fragment" and will be ignored by
			// the parser. Escaping '#' with '%23' solves this problem.
			var escapedQuery = _searchQuery.Replace("#", "%23");
			targetURI = "/?q=" + escapedQuery;
		}

		NavMan.NavigateTo(targetURI);
	}

	/// <summary>
	/// Change sort order to "newest first".
	/// </summary>
	private async Task SortByNewAsync()
	{
		_sortBy = Model.SearchQuery.SortOrder.NewestFirst;
		await UpdatePageAsync();
	}

	/// <summary>
	/// Change sort order to "oldest first".
	/// </summary>
	private async Task SortByOldAsync()
	{
		_sortBy = Model.SearchQuery.SortOrder.OldestFirst;
		await UpdatePageAsync();
	}

	private async Task ShowSavedAsync()
	{
		_savedOnly = !_savedOnly;
		await UpdatePageAsync();
	}
	
	/// <summary>
	/// Dispose: Clean up, deregister event handlers.
	/// </summary>
	public void Dispose()
	{
		NavMan.LocationChanged -= _locationChangedHandler;
	}
}