@page "/"
@attribute [Authorize(Roles = "user")]
@using System.Web
@* ReSharper disable once InconsistentNaming *@
@inject NavigationManager NavigationManager
@implements IDisposable

<style>
	#search_bar {
		background: #333844 url(/css/icons/Search.png) right no-repeat;
		padding-right: 17px;
	}
</style>

<AuthorizeView>
	<Authorized>
		<div class="container-left fix-left">
			<div class="main needs-padding">
				@* <img width="50" height="50" src="/css/icons/Default.jpg" alt="Profile Image" /> *@
				<h4>Hello, @_displayName</h4>
				<p class="p-annotation-lg">Logged in as: @_accountName</p>
				<div class="row btn-select">
					<button @onclick="NavHome" class="btn-primary btn-left">Home</button>
					<button @onclick="NavLogout" class="btn-danger btn-right">Logout</button>
				</div>
                </div>
			<div class="main row">
				<button @onclick="NavCreatePost" class="btn-norm">Start a Thread</button>
			</div>
			<div>
				<a href="/pref">
					<img width="50" height="50" src="/css/icons/Settings.png" alt="Settings Image" />
					Preferences
				</a>
			</div>
			<div class="">
				<p class="p-annotation-sm">@*Bottom*@</p>
			</div>
		</div>
		<div class="container-middle">
			<div class="main">
				@foreach (var thread in _threads)
				{
					<ThreadPreview ThreadModel="thread" />
				}
				<button @onclick="LoadMore" style="width: 100%;" class="btn-norm">Load more</button>
			</div>
		</div>
		<div class="container-right fix-right">
			<div class="main needs-padding">
				@* <h1>HOME <img src="/css/icons/Quick_Settings.png" width="40" height="40" alt="Settings"/></h1> *@
				<p>Sort by:</p>
                <div class="row btn-select">
                	<button @onclick="SortByNew" class="btn-left @(_sortBy == Module.Search.SortOrder.NewestFirst ? "btn-active" : "")">New</button>
                	<button @onclick="SortByOld" class="btn-right @(_sortBy == Module.Search.SortOrder.OldestFirst? "btn-active" : "")">Old</button>
                </div>
			</div>
			<div class="main row">
				<form @onsubmit="NavSearch">
					<input @bind-value="_searchQuery" id="search_bar" class="input-fg needs-padding" type="text" placeholder="Search @@User, #Tags or Posts"/>
				</form>
			</div>
			<div class="main needs-padding">
				<TrendingNow />
			</div>
		</div>
	</Authorized>
</AuthorizeView>

@code {
	[CascadingParameter]
	private Task<AuthenticationState> AuthenticationStateTask { get; set; }

	[CascadingParameter]
	private Model.Database DbContext { get; set; }
	
	private string _displayName;
	private string _accountName;
	private readonly List<Entity.Thread> _threads = new();
	private string _searchQuery;
	private Module.Search.SortOrder _sortBy = Module.Search.SortOrder.NewestFirst;
	
	// Stores our anonymous event handler to give us the possibility to unsubscribe it on dispose.
	private EventHandler<LocationChangedEventArgs> _locationChangedHandler;

	private string SearchQuery
	{
		get
		{
			// Everything inside an URI after an '#' counts as a "fragment" and will be ignored by
			// the parser. Escaping '#' with '%23' solves this problem.
			var uriBuilder = new UriBuilder(NavigationManager.Uri.Replace("#", "%23"));
			var q = HttpUtility.ParseQueryString(uriBuilder.Query);
			return q["q"];
		}
	}
	
	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateTask;

		var user = DbContext.Users.First(u => u.AccountName == authState.User.Identity.Name);
		_displayName = user.DisplayName;
		_accountName = user.AccountName;

		_locationChangedHandler = (_, _) =>
		{
			LocationChanged();
			StateHasChanged();
		};

		NavigationManager.LocationChanged += _locationChangedHandler; 
		
		LocationChanged();
	}

	private void LocationChanged()
	{
		var query = SearchQuery;
		_threads.Clear(); // New search query, delete old results first

		if (query is null) LoadThreads();
		else Search(query);
	}

	private void LoadMore()
	{
		var query = SearchQuery;
		// Load more of the same search query, don't delete old results

		if (query is null) LoadThreads();
		else Search(query);
	}

	private void LoadThreads()
	{
		var search = new Module.Search(DbContext)
		{
			// Only retrieve threads that are older than our oldest (or newer than our newest, when sorting by oldest
			// first) already retrieved thread.
			LastTimeStamp = _threads.LastOrDefault()?.Created ??
				// just make sure it's enough far in the past
				(Module.Search.SortOrder.NewestFirst == _sortBy ? DateTime.Now : new DateTime(1997, 1, 1)),
			SortBy = _sortBy
		};

		_threads.AddRange(search.GetThreads());
	}

	private void Search(string query)
	{
		if (query is null || query.Count() <= 0) return;

		var search = new Module.Search(DbContext)
		{
			// Only retrieve threads that are older than our oldest (or newer than our newest, when sorting by oldest
            // first) already retrieved thread.
            LastTimeStamp = _threads.LastOrDefault()?.Created ??
				// just make sure it's enough far in the past
            	(Module.Search.SortOrder.NewestFirst == _sortBy ? DateTime.Now : new DateTime(1997, 1, 1)),
			SortBy = _sortBy
		};

		List<Entity.Thread> results = new ();

		switch (query[0])
		{
			case '@':
				// if '@' -> search for posts by user
				var searchUser = query[1..];
            	results = search.SearchThreadsByUser(searchUser);
				break;
			case '#':
				// else if '#' -> search for posts containing tags
                var searchTags = Entity.Tag.ParseTags(DbContext, query[1..]);
               	if (searchTags is not null) results = search.SearchThreadsByTag(searchTags);
				break;
			default:
				// else -> search for posts with title
				results = search.SearchThreadsByTitle(query);
				break;
		}
		
		_threads.AddRange(results);
	}
	
	private void NavCreatePost()
	{
		NavigationManager.NavigateTo("/post");
	}

	private void NavLogout()
	{
		NavigationManager.NavigateTo("/login");
	}

	private void NavSearch()
	{
		//var encoded = HttpUtility.UrlEncode(_searchQuery);
		// ReSharper disable once InconsistentNaming
		var targetURI = string.IsNullOrEmpty(_searchQuery) ? "/" : "/?q=" + _searchQuery;
		NavigationManager.NavigateTo(targetURI);
	}

	private void NavHome()
	{
		NavigationManager.NavigateTo("/");
	}

	private void SortByNew()
	{
		_sortBy = Module.Search.SortOrder.NewestFirst;
		LocationChanged();
	}

	private void SortByOld()
	{
		_sortBy = Module.Search.SortOrder.OldestFirst;
		LocationChanged();
	}

	public void Dispose()
	{
		NavigationManager.LocationChanged -= _locationChangedHandler;
	}
}