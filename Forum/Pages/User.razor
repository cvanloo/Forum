@page "/user/{AccountName}"
@attribute [Authorize]
@* ReSharper disable once InconsistentNaming *@
@inject NavigationManager NavMan
@* ReSharper disable once InconsistentNaming *@
@inject IDbContextFactory<Model.Database> DbContext
@* ReSharper disable once InconsistentNaming *@
@inject IChatService ChatService
@implements IDisposable

<div class="container-left fix-left">
	<div class="main row">
		<button class="btn-norm-sec" @onclick='() => NavMan.NavigateTo("/")'>
			<img width="50" height="50" src="/css/icons/Arrow_Back.png" alt="Back Arrow" />
			Go Back
		</button>
	</div>
</div>
@if (_user is null)
{
	<div class="container-middle">
    	<div class="main needs-padding">
    		<p>User '@AccountName' not found.</p>
    	</div>
    </div>
}
else
{
	<div class="container-middle">
		<div class="main needs-padding">
			<h4>@_user.DisplayName (@_user.AccountName)</h4>
			<p>Account created on: @_user.Created.ToString("d")</p>
			@if (_user != _loggedUser)
			{
				var followText = _followsUser ? "Unfollow" : "Follow";
				<button class="btn-col-light btn-norm" style="width: 100%" @onclick="FollowUserAsync">@followText</button>
			}
			<hr>
			<h5>Chat</h5>
			@if (_chat is not null)
			{
				<input type="text" placeholder="Type your message..." class="form-control" style="margin: 0.5rem 0;" @bind="_sendMsg"/>
				<button class="btn-col-light btn-norm" style="width: 100%;" @onclick="SendChatMessageAsync">Send message</button>

				if (_chat.Messages is not null)
				{
					DateTime? lastDate = null;
					foreach (var message in _chat.Messages.OrderByDescending(m => m.Sent))
					{
						if (lastDate is null || lastDate.Value.Day.CompareTo(message.Sent.Day) > 0)
						{ // Whenever the day changes, display the new date.
							<hr>
							<p class="p-annotation-sm" style="color: #98971A;">@message.Sent.ToLongDateString()</p>
						}

						var senderString = string.IsNullOrWhiteSpace(message.Sender.DisplayName)
							? message.Sender.AccountName
							: message.Sender.DisplayName;

						<p class="p-annotation-sm" style="color: #98971A;">@message.Sent.ToShortTimeString() @senderString:</p>
						<p>@message.Content</p>
						lastDate = message.Sent;
					}
				}
			}
			else
			{
				<button class="btn-col-light btn-norm" style="width: 100%" @onclick="StartChatAsync">Start chat</button>
			}
		</div> 
    </div>
}

@code {
	private Entity.User _user;
	private Entity.User _loggedUser;
	private bool _followsUser;
	private Entity.Chat _chat;
	private string _sendMsg;
	IChatService.MsgHandler _msgHandler;
	
    [Parameter]
    public string AccountName { get; set; }

	[CascadingParameter]
	private Task<AuthenticationState> AuthenticationStateTask { get; set; }

	/// <summary>
	/// Initializes the page.
	/// </summary>
	protected override async Task OnInitializedAsync()
	{
		await using var dbContext = DbContext.CreateDbContext();
		var authState = await AuthenticationStateTask;
		
		// NOTE(multiple include): Expensive Query!
		_user = await dbContext.Users
			.Include(u => u.Threads)
				.ThenInclude(t => t.Tags)
			.Include(u => u.Threads)
				.ThenInclude(t => t.Creator)
			.Include(u => u.Threads)
				.ThenInclude(t => t.Forum)
			.Include(u => u.Followers)
			.AsSplitQuery() // Divide multiple includes into multiple queries
			.FirstOrDefaultAsync(u => u.AccountName == AccountName);

		if (_user is null) return;
		
		_loggedUser = dbContext.Users.First(u => u.AccountName == authState.User.Identity.Name);
		
		_followsUser = _user.Followers.Contains(_loggedUser);

		_chat = ChatService.FindChat(_user, _loggedUser);
		if (_chat is not null)
		{
			_msgHandler.Handler = UpdateChat;
			_msgHandler.Chat = _chat;
			ChatService.Subscribe(_msgHandler);
			_chat.Messages = ChatService.GetMessages(_chat);
		}
	}

	/// <summary>
	/// Subscribes visiting user to user from user-page.
	/// </summary>
	private async Task FollowUserAsync()
	{
		await using var dbContext = DbContext.CreateDbContext();
		var authState = await AuthenticationStateTask;
		
		var loggedUser = dbContext.Users.First(u => u.AccountName == authState.User.Identity.Name);
		
		// Get the user (from the page) form the same db context
		var user = dbContext.Users
			.Include(u => u.Followers)
			.First(u => u.Id == _user.Id);
		
		if (_followsUser)
		{
			user.Followers.Remove(loggedUser);
			_followsUser = false;
		}
		else
		{
			user.Followers.Add(loggedUser);
			_followsUser = true;
		}

		try
		{
			await dbContext.SaveChangesAsync();
		}
		catch (DbUpdateException dbuEx)
		{
			await Console.Error.WriteLineAsync(dbuEx.ToString());
		}
	}

	/// <summary>
	/// Creates a new chat between the currently visiting and the visited user.
	/// </summary>
	private async Task StartChatAsync()
	{
		await using var dbContext = DbContext.CreateDbContext();
		var authState = await AuthenticationStateTask;
		
		var visitedUser = dbContext.Users.First(u => u.AccountName == _user.AccountName);
		var visitingUser = dbContext.Users.First(u => u.AccountName == authState.User.Identity.Name);
		
		var chat = new Entity.Chat
		{
			Participants = new List<Entity.User> { visitedUser, visitingUser },
			Messages = new List<Entity.ChatMessage>()
		};

		dbContext.Chats.Add(chat);

		_msgHandler.Handler = UpdateChat;
		_msgHandler.Chat = chat;
		ChatService.Subscribe(_msgHandler);

		try
		{
			await dbContext.SaveChangesAsync();
			_chat = chat;
		}
		catch (DbUpdateException dbuEx)
		{
			await Console.Error.WriteLineAsync(dbuEx.ToString());
		}
	}

	/// <summary>
	/// Send a message into the chat.
	/// </summary>
	private async Task SendChatMessageAsync()
	{
		if (string.IsNullOrWhiteSpace(_sendMsg)) return;
		
		await using var dbContext = DbContext.CreateDbContext();
		var authState = await AuthenticationStateTask;
		
		// Get chat out of the same db context
		var loggedUser = dbContext.Users.First(u => u.AccountName == authState.User.Identity.Name);
		
		var newMsg = new Entity.ChatMessage
		{
			Sender = loggedUser,
			Content = _sendMsg
		};

		ChatService.SendMessage(_chat, newMsg);

		_sendMsg = "";
	}

	/// <summary>
	/// Event handler to update the chat when a message is received.
	/// Adds a message to the chat and updates the page.
	/// </summary>
	/// <param name="message">Received chat message.</param>
	private void UpdateChat(Entity.ChatMessage message)
	{
		_chat.Messages.Add(message);
		InvokeAsync(StateHasChanged);
	}

	/// <summary>
	/// Dispose: Clean up resources, unsubscribe event handlers.
	/// </summary>
	public void Dispose()
	{
		ChatService.Unsubscribe(_msgHandler);
	}
}