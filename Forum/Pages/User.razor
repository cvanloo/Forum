@page "/user/{AccountName}"
@attribute [Authorize]
@* ReSharper disable once InconsistentNaming *@
@inject NavigationManager NavMan
@* ReSharper disable once InconsistentNaming *@
@inject IDbContextFactory<Model.Database> DbContext

<div class="container-left fix-left">
	<div class="main row">
		<button class="btn-norm-sec" @onclick='() => NavMan.NavigateTo("/")'>
			<img width="50" height="50" src="/css/icons/Arrow_Back.png" alt="Back Arrow" />
			Go Back
		</button>
	</div>
</div>
@if (_user is null)
{
	<div class="container-middle">
    	<div class="main needs-padding">
    		<p>User '@AccountName' not found.</p>
    	</div>
    </div>
}
else
{
	<div class="container-middle">
		<div class="main needs-padding">
			<h4>@_user.DisplayName (@_user.AccountName)</h4>
			<p>Account created on: @_user.Created.ToString("d")</p>
			@{ var followText = _followsUser ? "Unfollow" : "Follow"; }
			<button class="btn-norm" style="width: 100%" @onclick="FollowUserAsync">@followText</button>
			<div style="border-bottom: 0.1rem solid #9BAEC8; border-radius: 0;" class="needs-padding shiny" ></div>
			<h5>Chat</h5>
			<input type="text" placeholder="Type your message..." class="form-control" @*@onclick="SendChatMessage"*@ />
			@if (_chat?.Messages is not null)
			{
				foreach (var message in _chat.Messages)
				{
					<p>@message.Sender: @message.Content</p>
				}
			}
		</div> 
    </div>
}


@code {
	private Entity.User _user;
	private bool _followsUser;
	private Entity.Chat _chat;
	
    [Parameter]
    public string AccountName { get; set; }

	[CascadingParameter]
	private Task<AuthenticationState> AuthenticationStateTask { get; set; }

	/// <summary>
	/// Initializes the page.
	/// </summary>
	protected override async Task OnInitializedAsync()
	{
		await using var dbContext = DbContext.CreateDbContext();
		var authState = await AuthenticationStateTask;
		
		_user = await dbContext.Users
			.Include(u => u.Threads)
				.ThenInclude(t => t.Tags)
			.Include(u => u.Threads)
				.ThenInclude(t => t.Creator)
			.Include(u => u.Threads)
				.ThenInclude(t => t.Forum)
			.Include(u => u.Followers)
			.FirstOrDefaultAsync(u => u.AccountName == AccountName);
		
		var loggedUser = dbContext.Users.First(u => u.AccountName == authState.User.Identity.Name);
		
		_followsUser = _user.Followers.Contains(loggedUser);
	}

	/// <summary>
	/// Subscribes visiting user to user from user-page.
	/// </summary>
	private async Task FollowUserAsync()
	{
		await using var dbContext = DbContext.CreateDbContext();
		var authState = await AuthenticationStateTask;
		
		var loggedUser = dbContext.Users.First(u => u.AccountName == authState.User.Identity.Name);
		
		// Get the user (from the page) form the same db context
		var user = dbContext.Users
			.Include(u => u.Followers)
			.First(u => u.Id == _user.Id);
		
		if (_followsUser)
		{
			user.Followers.Remove(loggedUser);
			_followsUser = false;
		}
		else
		{
			user.Followers.Add(loggedUser);
			_followsUser = true;
		}

		try
		{
			await dbContext.SaveChangesAsync();
		}
		catch (DbUpdateException dbuEx)
		{
			await Console.Error.WriteLineAsync(dbuEx.ToString());
		}
	}

	private async Task StartChatAsync()
	{
		await using var dbContext = DbContext.CreateDbContext();
		var authState = await AuthenticationStateTask;
		
		var loggedUser = dbContext.Users.First(u => u.AccountName == authState.User.Identity.Name);
		
		var chat = new Entity.Chat
		{
			Participants = { _user, loggedUser }
		};

		dbContext.Chats.Add(chat);

		try
		{
			await dbContext.SaveChangesAsync();
		}
		catch (DbUpdateException dbuEx)
		{
			await Console.Error.WriteLineAsync(dbuEx.ToString());
		}
	}

	/// <summary>
	/// Send a message into the chat.
	/// </summary>
	private async Task SendChatMessageAsync()
	{
		await using var dbContext = DbContext.CreateDbContext();
		var authState = await AuthenticationStateTask;
		
		// Get chat out of the same db context
		var loggedUser = dbContext.Users.First(u => u.AccountName == authState.User.Identity.Name);
		var visitedUser = dbContext.Users.First(u => u.AccountName == _user.AccountName);
		var chat = dbContext.Chats.First(c => c.Participants.Contains(loggedUser) && c.Participants.Contains(visitedUser)); // TODO: No!
		
		var newMsg = new Entity.ChatMessage
		{
			Parent = null, // parse using @ ?
			Sender = null, // user
			Content = null // text
		};

		chat.Messages.Add(newMsg);

		try
		{
			await dbContext.SaveChangesAsync();
		}
		catch (DbUpdateException dbuEx)
		{
			await Console.Error.WriteLineAsync(dbuEx.ToString());
		}
		
		// TODO: Update chat
	}

	private async Task UpdateChat()
	{
		await using var dbContext = DbContext.CreateDbContext();
		
		//_chat = 
	}
}