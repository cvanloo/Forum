@page "/register"
@using BCrypt.Net;
@using Microsoft.EntityFrameworkCore; 
@using Forum.Entity;
@using System.ComponentModel.DataAnnotations;
@inject IDbContextFactory<Model.Database> DbContext;
@inject NavigationManager NavigationManager; 

<h3>Register</h3>
<input type="text" @bind-value="_registerModel.AccountName" placeholder="Account name" />
<input type="email" @bind-value="_registerModel.Email" placeholder="Email Address" />
<input type="password" @bind-value="_registerModel.Password" placeholder="Password" />
<input type="password" @bind-value="_registerModel.RepeatPassword" placeholder="Repeat Password" />
<button @onclick="HashPw">Register</button>
<p>@_message</p>

@code {
	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }

	private RegisterModel _registerModel = new RegisterModel();

	private string _message;

	protected async override Task OnInitializedAsync()
	{
		var authenticationState = await authenticationStateTask;

		if (authenticationState.User.Identity.IsAuthenticated)
		{
			// Go away!
			NavigationManager.NavigateTo("/");
		}
	}

	private async Task HashPw()
	{
		string pwHash = BCrypt.EnhancedHashPassword(_registerModel.Password, 12);

		using var db = DbContext.CreateDbContext();

		if (db.Users.Where(u => u.AccountName == _registerModel.AccountName).Any())
		{
			_message = "Username already exists.";
			return;
		}

		if (db.Users.Where(u => u.Email == _registerModel.Email).Any())
		{
			_message = "There already is an account with this email address.";
			return;
		}

		User user = new User()
		{
			AccountName = _registerModel.AccountName,
			Email = _registerModel.Email,
			PwHash = pwHash
		};

		try
		{
			await db.Users.AddAsync(user);
			await db.SaveChangesAsync();

			NavigationManager.NavigateTo("/login");
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}

	public class RegisterModel
	{
		[Required]
		public string AccountName { get; set; }

		public string DisplayName { get; set; }

		[Required]
		public string Email { get; set; }

		[Required]
		public string Password { get; set; }

		[Required]
		[Compare(nameof(Password), ErrorMessage = "Passwords don't match.")]
		public string RepeatPassword { get; set; }
	}
}
