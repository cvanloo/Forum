@page "/pwreset/{Token?}"
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Configuration
@using System.Net.Mail; 
@inject NavigationManager NavMan
@inject IDbContextFactory<Model.Database> DbContext
@inject NavigationManager NavMan 
@inject IConfiguration Config
@inject IMailService MailService

@if (string.IsNullOrEmpty(Token))
{
	<div class="main text-center mt-5 ml-auto mr-auto form-sim">
		<div class="col">
			<h3 class="mt-2">Request Password Reset</h3>
			<input class="form-control" @bind-value="_email" type="text" placeholder="Email" />
			<p style="color: red">@_message</p>
			<div class="row">
				<button type="button" class="accent-blue btn-bottom-left btn-grow-medium" @onclick="NavLogin">Go to Login</button>
				<button type="submit" class="accent-green btn-bottom-right" @onclick="ProcessRequest">Request Reset Link</button>
			</div>
		</div>
	</div>
}
else if (!ValidateRequest())
{
	<div class="main text-center mt-5 ml-auto mr-auto form-sim">
		<div class="col">
			<h3 class="mt-2 pt-5 pl-5 pr-5">Reset Request Invalid</h3>
			<p class="pb-5">The reset request was already used or timed out.</p>
			<div class="row">
				<button type="button" class="accent-green btn-bottom-left btn-bottom-right" @onclick="NavLogin">Go to Login</button>
			</div>
		</div>
	</div>
}
else
{
	<div class="main text-center mt-5 ml-auto mr-auto form-sim">
		<div class="col">
			<h3 class="mt-2">Update Password</h3>
			<input class="form-control" @bind-value="_newPassword" type="password" placeholder="New Password" />
			<input class="form-control" @bind-value="_repNewPassword" type="password" placeholder="Repeat New Password" />
			<div class="row">
				<button type="submit" class="accent-green btn-bottom-left btn-bottom-right" @onclick="UpdatePassword">Save Password</button>
			</div>
		</div>
	</div>
}

@code {
	[Parameter]
	public string Token { get; set; }

	private string _email;

	private string _newPassword;
	private string _repNewPassword;

	private string _message;

	private async void ProcessRequest()
	{
		using var db = DbContext.CreateDbContext();

		var user = db.Users.FirstOrDefault(u => u.Email == _email);

		if (user is null)
		{
			_message = "Email not found.";
			return;
		}

		string rndToken = Guid.NewGuid().ToString();

		var pwReset = new Entity.PwReset()
		{
			UserId = user.Id,
			Token = rndToken
		};

		db.PwResets.Add(pwReset);

		await db.SaveChangesAsync();

		// Send reset link with token
		var mail = new Model.Message()
		{
			Body = "localhost:5000/pwreset/" + pwReset.Token,
			Subject = "PASSWORD RESET REQUEST",
			From = "sender@domaine.ch",
			To = new string[] { pwReset.User.Email }
		};

		await MailService.Send(mail);
		_message = "Reset link sent.";
	}

	private bool ValidateRequest()
	{
		using var db = DbContext.CreateDbContext();

		var pwReset = db.PwResets.Include(p => p.User).FirstOrDefault(p => p.Token == Token);

		if (pwReset is null) return false;

		DateTime expiring = pwReset.Timestamp;
		expiring = expiring.AddMinutes(15);

		if (pwReset.Used || DateTime.Now.CompareTo(expiring) >= 0)
			return false;
		return true;
	}

	private async void UpdatePassword()
	{
		using var db = DbContext.CreateDbContext();

		var pwReset = db.PwResets.Include(p => p.User).FirstOrDefault(p => p.Token == Token);

		if (!string.IsNullOrEmpty(_newPassword) && _repNewPassword == _newPassword)
		{
			string pwHash = BCrypt.Net.BCrypt.EnhancedHashPassword(_newPassword, Config.GetValue<int>("Workfactor"));

			pwReset.User.PwHash = pwHash;
		}

		pwReset.Used = true;
		await db.SaveChangesAsync();

		// Send email confirmation
		var mail = new Model.Message()
		{
			Body = "Your password was successfully updated.",
			Subject = "PASSWORD RESET SUCCESSFUL",
			From = "sender@domaine.ch",
			To = new string[] { pwReset.User.Email }
		};

		await MailService.Send(mail);
	}

	private void NavLogin()
	{
		NavMan.NavigateTo("/login");
	}
}

@*
	{Id:int?}
	{*CatchAll}

	var uriBuilder = new UriBuilder(NavMan.Uri);
	var q = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
	Test = q["Test"] ?? "";
*@
