@page "/pwreset/{Token?}"
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavMan;
@inject IDbContextFactory<Model.Database> DbContext;

@if (string.IsNullOrEmpty(Token))
{
	<div class="main text-center mt-5 ml-auto mr-auto">
		<div class="col">
			<h3 class="mt-2">Request Password Reset</h3>
			<input class="form-control" @bind-value="_email" type="text" placeholder="Email" />
			<div class="row">
				<button class="accent-green btn-bottom-left btn-bottom-right" @onclick="ProcessRequest">Request reset Link</button>
			</div>
		</div>
	</div>
}
else
{
	<div class="main text-center mt-5 ml-auto mr-auto">
		<div class="col">
			<h3 class="mt-2">Update Password</h3>
			<input class="form-control" @bind-value="_newPassword" type="password" placeholder="New Password" />
			<input class="form-control" @bind-value="_repNewPassword" type="password" placeholder="Repeat New Password" />
			<div class="row">
				<button class="accent-green btn-bottom-left btn-bottom-right" @onclick="UpdatePassword">Save Password"</button>
			</div>
		</div>
	</div>
}

@code {
	[Parameter]
	public string Token { get; set; }

	private string _email;

	private string _newPassword;
	private string _repNewPassword;

	private async void ProcessRequest()
	{
		using var db = DbContext.CreateDbContext();

		// TODO: Validate email

		var user = db.Users.FirstOrDefault(u => u.Email == _email);

		if (null != user)
		{
			string rndToken = Guid.NewGuid().ToString();

			var pwReset = new Entity.PwReset()
			{
				UserId = user.Id,
				Token = rndToken
			};

			db.PwResets.Add(pwReset);

			await db.SaveChangesAsync();

			// TODO: Send reset link with token
		}
	}

	private async void UpdatePassword()
	{
		using var db = DbContext.CreateDbContext();

		var pwReset = db.PwResets.Include(p => p.User).FirstOrDefault(p => p.Token == Token);

		DateTime expiring = pwReset.Timestamp;
		expiring = expiring.AddMinutes(30);

		if (!pwReset.Used && DateTime.Now.CompareTo(expiring) < 0)
		{
			if (!string.IsNullOrEmpty(_newPassword) && _repNewPassword == _newPassword)
			{
				string pwHash = BCrypt.Net.BCrypt.EnhancedHashPassword(_newPassword, 12);

				pwReset.User.PwHash = pwHash;
			}
		}

		pwReset.Used = true;
		await db.SaveChangesAsync();
	}
}

@*
	{Id:int?}
	{*CatchAll}

	var uriBuilder = new UriBuilder(NavMan.Uri);
	var q = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
	Test = q["Test"] ?? "";
*@
