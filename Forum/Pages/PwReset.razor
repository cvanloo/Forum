@page "/pwreset/{Token?}"
@using Microsoft.Extensions.Configuration
@using System.ComponentModel.DataAnnotations
@* ReSharper disable once InconsistentNaming *@
@inject NavigationManager NavMan
@* ReSharper disable once InconsistentNaming *@
@inject IConfiguration Config
@* ReSharper disable once InconsistentNaming *@
@inject IMailService MailService
@* ReSharper disable once InconsistentNaming *@
@inject Data.InfoMessage MessageService
@* ReSharper disable once InconsistentNaming *@
@inject IDbContextFactory<Model.Database> DbContext

@if (string.IsNullOrEmpty(Token))
{
	<div class="main text-center mt-5 ml-auto mr-auto form-sim">
		<EditForm Model="_pwResetModel" OnValidSubmit="ProcessRequestAsync">
			<DataAnnotationsValidator />
			<div class="col">
				<h3 class="mt-2">Request Password Reset</h3>
				<div class="relative-span">
					<InputText class="form-control" @bind-Value="_pwResetModel.Email" type="text" placeholder="Email" />
					<ValidationMessage For="() => _pwResetModel.Email"/>
				</div>
				<div class="row">
					<button type="button" class="btn-col-dark accent-light btn-left btn-grow-medium" @onclick='() => NavMan.NavigateTo("/login")'>Go to Login</button>
					<button type="submit" class="btn-col-dark accent-dark btn-right">Request Reset Link</button>
				</div>
			</div>
		</EditForm>
	</div>
}
else if (!ValidateRequest())
{
	<div class="main text-center mt-5 ml-auto mr-auto form-sim">
		<div class="col">
			<h3 class="mt-2 pt-5 pl-5 pr-5">Reset Request Invalid</h3>
			<p class="pb-5">The reset request was already used or timed out.</p>
			<div class="row">
				<button type="button" class="btn-col-dark accent-dark btn-left btn-right" @onclick='() => NavMan.NavigateTo("/login")'>Go to Login</button>
			</div>
		</div>
	</div>
}
else
{
	<div class="main text-center mt-5 ml-auto mr-auto form-sim">
		<EditForm Model="_newPasswordModel" OnValidSubmit="UpdatePasswordAsync">
			<DataAnnotationsValidator/>
			<div class="col">
				<h3 class="mt-2">Update Password</h3>
				<div class="relative-span">
					<InputText class="form-control" @bind-Value="_newPasswordModel.NewPassword" type="password" placeholder="New Password"/>
					<ValidationMessage For="() => _newPasswordModel.NewPassword"/>
				</div>
				<div class="relative-span">
					<InputText class="form-control" @bind-Value="_newPasswordModel.RepNewPassword" type="password" placeholder="Repeat New Password"/>
					<ValidationMessage For="() => _newPasswordModel.RepNewPassword"/>
				</div>
				<div class="row">
					<button type="submit" class="btn-col-dark accent-dark btn-left btn-right">Save Password</button>
				</div>
			</div>
		</EditForm>
	</div>
}

@code {
	private readonly PwResetModel _pwResetModel = new();
	private readonly NewPasswordModel _newPasswordModel = new();
	
	[Parameter]
	public string Token { get; set; }

	/// <summary>
	/// Sends the user a reset link per email.
	/// </summary>
	private async Task ProcessRequestAsync()
	{
		await using var dbContext = DbContext.CreateDbContext();
		
		var user = dbContext.Users.FirstOrDefault(u => u.Email == _pwResetModel.Email);

		if (user is null)
		{
			MessageService.Message = "Account does not exist.";
			return;
		}

		var rndToken = Guid.NewGuid().ToString();

		var pwReset = new Entity.PwReset
		{
			UserId = user.Id,
			Token = rndToken
		};

		dbContext.PwResets.Add(pwReset);

		try
		{
			await dbContext.SaveChangesAsync();
		}
		catch (DbUpdateException dbuEx)
		{
			await Console.Error.WriteLineAsync(dbuEx.ToString());

			MessageService.Message = "Could not process request. Please reload the page and try again.";
			return;
		}

		// Send reset link with token
		await MailService.SendAsync(new Model.Message
		{
			Body = "localhost:5000/pwreset/" + pwReset.Token,
           	Subject = "PASSWORD RESET REQUEST",
           	From = "sender@domaine.ch",
           	To = new[] { pwReset.User.Email }
		});
		
		MessageService.Message = "Reset link sent.";
	}

	/// <summary>
	/// Checks if the in the url provided token is valid.
	/// </summary>
	private bool ValidateRequest()
	{
		using var dbContext = DbContext.CreateDbContext();
		
		var pwReset = dbContext.PwResets
			.Include(p => p.User)
			.FirstOrDefault(p => p.Token == Token);

		if (pwReset is null) return false;

		// Let a request expire after 15 minutes.
		var expiring = pwReset.Timestamp;
		expiring = expiring.AddMinutes(15);

		if (pwReset.Used || DateTime.Now.CompareTo(expiring) >= 0)
			return false;
		return true;
	}

	/// <summary>
	/// Updates the password.
	/// </summary>
	private async Task UpdatePasswordAsync()
	{
		await using var dbContext = DbContext.CreateDbContext();
		
		var pwReset = dbContext.PwResets
			.Include(p => p.User)
			.FirstOrDefault(p => p.Token == Token);

		if (pwReset is null) return;

		var pwHash = BCrypt.Net.BCrypt.EnhancedHashPassword(_newPasswordModel.NewPassword, Config.GetValue<int>("Workfactor"));

		pwReset.User.PwHash = pwHash;
		pwReset.Used = true;

		try
		{
			await dbContext.SaveChangesAsync();
		}
		catch (DbUpdateException dbuEx)
		{
			await Console.Error.WriteLineAsync(dbuEx.ToString());

			MessageService.Message = "Could not process request. Please reload the page and try again.";
			return;
		}

		// Send email confirmation
		await MailService.SendAsync(new Model.Message
		{
			Body = "Your password was successfully updated.",
        	Subject = "PASSWORD CHANGED",
        	From = "user@domaine.ch",
            To = new[] { pwReset.User.Email }
		});

		MessageService.Message = "Password updated.";
		NavMan.NavigateTo("/login");
	}

	public class PwResetModel
	{
		[Required]
		public string Email { get; set; }
	}

	public class NewPasswordModel
	{
		[Required(ErrorMessage = "The 'New Password' field is required.")]
		public string NewPassword { get; set; }
		
		[Required]
		[Compare(nameof(NewPassword), ErrorMessage = "Passwords don't match.")]
		public string RepNewPassword { get; set; }
	}
}