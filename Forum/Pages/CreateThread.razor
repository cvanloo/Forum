@page "/post"
@*TODO: Policies?*@
@*@attribute [Authorize(Roles = "user")]*@
@attribute [Authorize(Policy = "IsPoster")]
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<Model.Database> DbContext
@inject NavigationManager NavMan 

<div class="main text-center mt-5 ml-auto mr-auto form-bigger">
	<div class="col">
		<h3 class="mt-2">Create Thread</h3>
		<select class="form-control" @bind="_forumId">
			@foreach (Entity.Forum forum in _forums)
			{
				<option value="@forum.Id">@forum.Name</option>
			}
		</select>
		<input class="form-control" type="text" placeholder="Title" @bind-value="_title" />
		<textarea class="form-control" placeholder="Content" @bind="_content" />
		<input class="form-control" type="text" placeholder="Add Tags" @bind-value="_tags" />
		<input class="form-control" type="file" />
		<div class="row">
			<button type="button" @onclick="NavHome" class="accent-blue btn-bottom-left">Go Back</button>
			<button type="submit" @onclick="StoreThread" class="accent-green btn-bottom-right">Create Thread</button>
		</div>
	</div>
</div>

@code {
	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }

	private Entity.Forum[] _forums;
	private int _forumId = 1;
	private string _title;
	private string _content;
	private string _tags;

	protected async override Task OnInitializedAsync()
	{
		using var db = DbContext.CreateDbContext();

		_forums = db.Forums.ToArray();
	}

	private async void StoreThread()
	{
		using var db = DbContext.CreateDbContext();

		string content = null;
		var authState = await authenticationStateTask;
		var user = db.Users.FirstOrDefault(u => u.AccountName == authState.User.Identity.Name);
		var tags = ParseTags(db);

		var newThread = new Entity.Thread()
		{
			ContentPath = content,
			Creator = user,
			ForumId = _forumId,
			Title = _title,
			Tags = tags
		};

		db.Threads.Add(newThread);
		db.SaveChanges();
	}

	private void NavHome()
	{
		NavMan.NavigateTo("/");
	}

	private List<Entity.Tag> ParseTags(Model.Database db)
	{
		List<Entity.Tag> tags = new List<Entity.Tag>();
		string[] separatedTags = _tags.Split(new char[] { ' ', '#' });

		foreach (string tagStr in separatedTags)
		{
			if (string.IsNullOrEmpty(tagStr)) continue;

			// Get tag from db if it exists, create a new tag if it doesn't.
			Entity.Tag tag = db.Tags.FirstOrDefault(t => t.Name == tagStr);

			if (null != tag)
				tags.Add(tag);
			else
				tags.Add(new Entity.Tag() { Name = tagStr });
		}

		return tags;
	}
}
