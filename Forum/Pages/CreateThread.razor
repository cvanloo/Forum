@page "/post"
@*@attribute [Authorize(Roles = "user")]*@
@attribute [Authorize(Policy = "IsPoster")]
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Configuration
@using InfoMessage = Forum.Data.InfoMessage
@inject NavigationManager NavMan
@inject IConfiguration Config
@inject Data.InfoMessage MessageService

<div class="main text-center mt-5 ml-auto mr-auto form-bigger">
	<form @onsubmit="StoreThread" class="form-bigger">
		<div class="col">
			<h3 class="mt-2">Create Thread</h3>
			<select disabled class="form-control" @bind="_forumId">
				@foreach (Entity.Forum forum in _forums)
				{
					<option value="@forum.Id">@forum.Name</option>
				}
			</select>
			<input class="form-control" type="text" placeholder="Title" @bind-value="_title" />
			<textarea class="form-control" placeholder="Content" @bind="_content" maxlength="20798"/>
			<input class="form-control" type="text" placeholder="Add Tags" @bind-value="_tags" />
			<div class="row">
				<button type="button" @onclick="NavHome" class="accent-blue btn-bottom-left">Go Back</button>
				<button type="submit" class="accent-green btn-bottom-right">Create Thread</button>
			</div>
		</div>
	</form>
</div>

@code {
	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }

	[CascadingParameter]
	private Model.Database DbContext { get; set; }

	private Entity.Forum[] _forums;
	private int _forumId = 1;
	private string _title;
	private string _content;
	private string _tags;

	protected override async Task OnInitializedAsync()
	{
		_forums = DbContext.Forums.ToArray();
	}

	private async void StoreThread()
	{
		if (string.IsNullOrEmpty(_content))
		{
			MessageService.Message = "Content needs to be between 1 and 20798 characters long.";
			return;
		}

		try
		{
			var authState = await authenticationStateTask;

			string uploadPath = Config.GetValue<string>("UploadPath") + Guid.NewGuid().ToString();
			Entity.User user = DbContext.Users.FirstOrDefault(u => u.AccountName == authState.User.Identity.Name);
			List<Entity.Tag> tags = ParseTags();

			var newThread = new Entity.Thread()
			{
				ContentPath = uploadPath,
				Creator = user,
				ForumId = _forumId,
				Title = _title,
				Tags = tags
			};

			DbContext.Threads.Add(newThread);
			System.IO.File.WriteAllText(uploadPath, _content);
			await DbContext.SaveChangesAsync();

			MessageService.Message = "Thread uploaded.";
			
			NavMan.NavigateTo("/thread/" + newThread.Id);
		}
		catch (Exception ex)
		{
			Console.Error.WriteLine("\n\n\n!!!!!!!\n\n\n");
			Console.Error.WriteLine(ex.ToString());
			Console.Error.WriteLine("\n\n\n!!!!!!!\n\n\n");

			MessageService.Message = "Failed to upload post.";
		}
	}

	private void NavHome()
	{
		NavMan.NavigateTo("/");
	}

	private List<Entity.Tag> ParseTags()
	{
		if (string.IsNullOrEmpty(_tags)) return null;

		var tags = new List<Entity.Tag>();
		string[] separatedTags = _tags.Split(new char[] { ' ', '#' });

		foreach (var tagStr in separatedTags)
		{
			if (string.IsNullOrEmpty(tagStr)) continue;

			// Get tag from db if it exists, create a new tag if it doesn't.
			var tag = DbContext.Tags.FirstOrDefault(t => t.Name == tagStr);

			if (null != tag)
				tags.Add(tag);
			else
				tags.Add(new Entity.Tag() { Name = tagStr });
		}

		return tags;
	}
}
