@page "/post"
@*@attribute [Authorize(Roles = "user")]*@
@attribute [Authorize(Policy = "IsPoster")]
@using Microsoft.Extensions.Configuration
@using Forum.Model
@using Microsoft.EntityFrameworkCore
@* ReSharper disable once InconsistentNaming *@
@inject NavigationManager NavMan
@* ReSharper disable once InconsistentNaming *@
@inject IConfiguration Config
@* ReSharper disable once InconsistentNaming *@
@inject Data.InfoMessage MessageService
@* ReSharper disable once InconsistentNaming *@
@inject IMailService MailService
@* ReSharper disable once InconsistentNaming *@
@inject IDbContextFactory<Model.Database> DbContext

<div class="main text-center mt-5 ml-auto mr-auto form-bigger">
	<form @onsubmit="StoreThread" class="form-bigger">
		<div class="col">
			<h3 class="mt-2">Create Thread</h3>
			<select class="form-control" @bind="_forumId">
				@foreach (Entity.Forum forum in _forums)
				{
					<option value="@forum.Id">@forum.Name</option>
				}
			</select>
			<input class="form-control" type="text" placeholder="Title" @bind-value="_title" />
			<textarea class="form-control" placeholder="Content" @bind="_content" maxlength="20798"></textarea>
			<input class="form-control" type="text" placeholder="Add Tags" @bind-value="_tags" />
			<div class="row">
				<button type="button" @onclick="NavHome" class="accent-blue btn-bottom-left">Go Back</button>
				<button type="submit" class="accent-green btn-bottom-right">Create Thread</button>
			</div>
		</div>
	</form>
</div>

@code {
	[CascadingParameter]
	private Task<AuthenticationState> AuthenticationStateTask { get; set; }

	private Entity.Forum[] _forums;
	private int _forumId = 1;
	private string _title;
	private string _content;
	private string _tags;

	protected override async Task OnInitializedAsync()
	{
		await using var dbContext = DbContext.CreateDbContext();
		
		_forums = dbContext.Forums.ToArray();
	}

	private async void StoreThread()
	{
		await using var dbContext = DbContext.CreateDbContext();
		
		if (string.IsNullOrEmpty(_content))
		{
			MessageService.Message = "Content needs to be between 1 and 20798 characters long.";
			return;
		}

		try
		{
			var authState = await AuthenticationStateTask;

			var uploadPath = Config.GetValue<string>("UploadPath") + Guid.NewGuid();
			var user = dbContext.Users
				.Include(u => u.Followers)
				.FirstOrDefault(u => u.AccountName == authState.User.Identity.Name);
			var tags = Entity.Tag.ParseTags(dbContext, _tags);

			var newThread = new Entity.Thread()
			{
				ContentPath = uploadPath,
				Creator = user,
				ForumId = _forumId,
				Title = _title,
				Tags = tags
			};

			dbContext.Threads.Add(newThread);
			System.IO.File.WriteAllText(uploadPath, _content);
			await dbContext.SaveChangesAsync();

			MessageService.Message = "Thread uploaded.";

			var forum = dbContext.Forums
				.Include(f => f.Members)
				.First(f => f.Id == _forumId);
			
			// TODO: Don't include users mulitple times.
			var recipientsFollowForum = forum.Members.Select(member => member.Email).ToList();
			var recipientsFollowUser = user.Followers.Select(follower => follower.Email).ToList();
			recipientsFollowForum.AddRange(recipientsFollowUser);
			var recipients = recipientsFollowForum.ToArray();
			// TODO: Don't block user
			MailService.Send(new Message
			{
				From = "user@domain.ch",
				Subject = "New Post To " + forum.Name,
				Body = forum.Name + ": " + newThread.Title + "<br>localhost:5000/thread/" + newThread.Id,
				To = recipients
			});
			
			NavMan.NavigateTo("/thread/" + newThread.Id);
		}
		catch (Exception ex)
		{
			await Console.Error.WriteLineAsync(ex.ToString());

			MessageService.Message = "Failed to upload post.";
		}
	}

	private void NavHome()
	{
		NavMan.NavigateTo("/");
	}
}
