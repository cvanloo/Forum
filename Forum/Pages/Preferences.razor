@page "/pref"
@using Microsoft.Extensions.Configuration
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]
@* ReSharper disable once InconsistentNaming *@
@inject NavigationManager NavMan
@* ReSharper disable once InconsistentNaming *@
@inject IConfiguration Config
@* ReSharper disable once InconsistentNaming *@
@inject IMailService MailService
@* ReSharper disable once InconsistentNaming *@
@inject Data.InfoMessage MessageService
@* ReSharper disable once InconsistentNaming *@
@inject IDbContextFactory<Model.Database> DbContext

<style>
	p {
		border-bottom: 1px solid #9BAEC8;
	}
</style>

<div class="main text-center mt-5 ml-auto mr-auto form-bigger">
	<EditForm OnValidSubmit="UpdateAccount" Model="_preferencesModel" class="form-bigger">
		<DataAnnotationsValidator />
		<div class="col">
			<h3 class="mt-2">User Preferences</h3>
			<p>Username</p>
			<div class="relative-span">
				<InputText type="text" disabled class="form-control" @bind-Value="_preferencesModel.AccountName" />
				<ValidationMessage For="() => _preferencesModel.AccountName" />
			</div>
			<div class="relative-span">
				<InputText type="text" class="form-control" placeholder="Displayname" @bind-Value="_preferencesModel.DisplayName" />
				<ValidationMessage For="() => _preferencesModel.DisplayName" />
			</div>
			<p>Email</p>
			<div class="relative-span">
				<InputText type="email" class="form-control" placeholder="Email Address" @bind-Value="_preferencesModel.Email" />
				<ValidationMessage For="() => _preferencesModel.Email" />
			</div>
			<p>Password</p>
			<div class="relative-span">
				<InputText type="password" class="form-control" placeholder="Current Password" @bind-Value="_preferencesModel.CurrentPassword" />
				<ValidationMessage For="() => _preferencesModel.CurrentPassword" />
			</div>
			<div class="relative-span">
				<InputText type="password" class="form-control" placeholder="New Password" @bind-Value="_preferencesModel.NewPassword" />
				<ValidationMessage For="() => _preferencesModel.NewPassword" />
			</div>
			<div class="relative-span">
				<InputText type="password" class="form-control" placeholder="Repeat New Password" @bind-Value="_preferencesModel.RepNewPassword" />
				<ValidationMessage For="() => _preferencesModel.RepNewPassword" />
			</div>
			<div class="row">
				<button type="button" @onclick='() => NavMan.NavigateTo("/")' class="accent-blue btn-bottom-left">Go Back</button>
				<button type="submit" class="accent-green btn-bottom-right">Update Account</button>
			</div>
		</div>
	</EditForm>
</div>

@code {
	private readonly PreferencesModel _preferencesModel = new();

	[CascadingParameter]
	private Task<AuthenticationState> AuthenticationStateTask { get; set; }

	/// <summary>
	/// Initializes the page.
	/// </summary>
	protected override async Task OnInitializedAsync()
	{
		await using var dbContext = DbContext.CreateDbContext();
		var authState = await AuthenticationStateTask;

		var user = dbContext.Users.First(u => u.AccountName == authState.User.Identity.Name);

		_preferencesModel.AccountName = user.AccountName;
		_preferencesModel.DisplayName = user.DisplayName;
		_preferencesModel.Email = user.Email;
	}

	/// <summary>
	/// Update user preferences.
	/// </summary>
	private async Task UpdateAccount()
	{
		await using var dbContext = DbContext.CreateDbContext();
		var authState = await AuthenticationStateTask;
		
		var user = dbContext.Users.First(u => u.AccountName == authState.User.Identity.Name);

		user.DisplayName = _preferencesModel.DisplayName;
		user.Email = _preferencesModel.Email;

		// TODO: Better validation using the Model
		if (!string.IsNullOrEmpty(_preferencesModel.CurrentPassword) && !string.IsNullOrEmpty(_preferencesModel.NewPassword))
		{
			if (BCrypt.Net.BCrypt.EnhancedVerify(_preferencesModel.CurrentPassword, user.PwHash))
			{
				user.PwHash = BCrypt.Net.BCrypt.EnhancedHashPassword(_preferencesModel.NewPassword, Config.GetValue<int>("Workfactor"));
			}
			else
			{
				MessageService.Message = "Wrong Password.";
				return;
			}
		}

		try
		{
			await dbContext.SaveChangesAsync();
		}
		catch (DbUpdateException dueEx)
		{
			await Console.Error.WriteLineAsync(dueEx.ToString());

			MessageService.Message = "Could not update preferences. Please reload the page and try again.";
			return;
		}

		var mail = new Model.Message
		{
			Body = "Your account information has been updated.",
			Subject = "ACCOUNT INFORMATION CHANGED",
			From = "user@domaine.ch",
			To = new[] { user.Email }
		};
		await MailService.SendAsync(mail);
		
		MessageService.Message = "Account preferences updated.";
	}

	public class PreferencesModel
	{
		[Editable(false)]
		[RegularExpression(@"^(?!.*@).*$", ErrorMessage = "Accountname can't contain '@'.")]
		public string AccountName { get; set; }
		
		[Required]
		public string DisplayName { get; set; }	
		
		[Required]
		[RegularExpression(@"^.+@.+$", ErrorMessage = "Not a valid Email address.")]
    	public string Email { get; set; }
		
		public string CurrentPassword { get; set; }
		
		public string NewPassword { get; set; }
		
		[Compare(nameof(NewPassword), ErrorMessage = "Passwords don't match.")]
		public string RepNewPassword { get; set; }
	}
}
