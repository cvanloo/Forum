@page "/pref"
@using Microsoft.Extensions.Configuration
@using Microsoft.EntityFrameworkCore
@attribute [Authorize]
@* ReSharper disable once InconsistentNaming *@
@inject NavigationManager NavMan
@* ReSharper disable once InconsistentNaming *@
@inject IConfiguration Config
@* ReSharper disable once InconsistentNaming *@
@inject IMailService MailService
@* ReSharper disable once InconsistentNaming *@
@inject Data.InfoMessage MessageService
@* ReSharper disable once InconsistentNaming *@
@inject IDbContextFactory<Model.Database> DbContext

<style>
	p {
		border-bottom: 1px solid #9BAEC8;
	}
</style>

<div class="main text-center mt-5 ml-auto mr-auto form-bigger">
	<EditForm OnValidSubmit="UpdateAccount" Model="_testModel" class="form-bigger">
		<div class="col">
			<h3 class="mt-2">User Preferences</h3>
			<p>Username</p>
			<input type="text" disabled class="form-control" placeholder="@_accountName (Cannot be changed)" />
			<input type="text" class="form-control" placeholder="Displayname" @bind-value="@_displayName" />
			<p>Email</p>
			<input type="email" class="form-control" placeholder="Email Address" @bind-value="@_email" />
			<p>Password</p>
			<input type="password" class="form-control" placeholder="Current Password" @bind-value="@_currentPasswd" />
			<input type="password" class="form-control" placeholder="New Password" @bind-value="@_newPasswd" />
			<input type="password" class="form-control" placeholder="Repeat New Password" @bind-value="@_repNewPasswd" />
			<div class="row">
				<button type="button" @onclick="NavHome" class="accent-blue btn-bottom-left">Go Back</button>
				<button type="submit" class="accent-green btn-bottom-right">Update Account</button>
			</div>
		</div>
	</EditForm>
</div>

@code {
	private string _accountName;
	private string _displayName;
	private string _email;
	private string _currentPasswd;
	private string _newPasswd;
	private string _repNewPasswd;

	private readonly TestModel _testModel = new();

	[CascadingParameter]
	private Task<AuthenticationState> AuthenticationStateTask { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await using var dbContext = DbContext.CreateDbContext();
		var authState = await AuthenticationStateTask;

		var user = dbContext.Users.First(u => u.AccountName == authState.User.Identity.Name);

		_accountName = user.AccountName;
		_displayName = user.DisplayName;
		_email = user.Email;
	}

	private async void UpdateAccount()
	{
		await using var dbContext = DbContext.CreateDbContext();
		
		var msg = "";
		var authState = await AuthenticationStateTask;

		var user = dbContext.Users.First(u => u.AccountName == authState.User.Identity.Name);

		if (!string.IsNullOrWhiteSpace(_displayName) &&
			_displayName != user.DisplayName)
		{
			user.DisplayName = _displayName;
			msg += "Displayname, ";
		}

		if (!string.IsNullOrWhiteSpace(_email) &&
			_email != user.Email)
		{
			user.Email = _email;
			msg += "Email, ";
		}

		if (!string.IsNullOrEmpty(_newPasswd) &&
			!string.IsNullOrEmpty(_repNewPasswd) &&
			_repNewPasswd == _newPasswd &&
			BCrypt.Net.BCrypt.EnhancedVerify(_currentPasswd, user.PwHash))
		{
			user.PwHash = BCrypt.Net.BCrypt.EnhancedHashPassword(_newPasswd, Config.GetValue<int>("Workfactor"));
			msg += "Password ";
		}

		await dbContext.SaveChangesAsync();
		msg += "changed.";

		var mail = new Model.Message()
		{
			Body = "Your account information has been updated.",
			Subject = "ACCOUNT INFORMATION CHANGED",
			From = "user@domaine.ch",
			To = new[] { user.Email }
		};
		await MailService.Send(mail);
		
		MessageService.Message = msg;
	}

	private void NavHome()
	{
		NavMan.NavigateTo("/"); // TODO: Use <a href />
	}

	public class TestModel
	{
		// TODO: Use model for input validation
	}
}
