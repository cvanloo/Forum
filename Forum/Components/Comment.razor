@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<Model.Database> DbContext

<style>
	.border-left {
		border-left: 2px solid white !important;
		border-radius: 0;
	}

	.collapsed {
		padding: 0 !important;
		color: gray;
	}

	.collapsed span {
		display: none;
	}

</style>

<div class="second needs-padding border-left @_collapseClass" >
	<p class="p-annotation-sm">
		@CommentModel.Creator.AccountName
		@CommentModel.Created.ToString("t"), @CommentModel.Created.ToString("d")
		<button class="btn-mini" @onclick="Collapse">--</button>
	</p>
	<span>
		<pre class="txt-title">@CommentModel.Text</pre>
		<button class="btn-mini" @onclick="ToggleCommentField" >Answer</button>
		<div class="@_cfClass">
			<CommentField ThreadId="@CommentModel.ThreadId" ParentId="@CommentModel.Id" CommentStateChanged="(o, e) => InvokeAsync(() => Update())" />
		</div>
	
		@foreach (Entity.Comment c in _childs)
		{
			<Comment CommentModel="c" />
		}
	</span>
</div>

@code {
	[Parameter]
	public Entity.Comment CommentModel { get; set; }

	private List<Entity.Comment> _childs;
	private string _cfClass = "hidden";
	private string _collapseClass = "";

	protected async override Task OnInitializedAsync()
	{
		Update();
	}

	private void ToggleCommentField()
	{
		if ("hidden" == _cfClass)
			_cfClass = "";
		else
			_cfClass = "hidden";
	}

	private void Collapse()
	{
		if ("collapsed" == _collapseClass)
			_collapseClass = "";
		else
			_collapseClass = "collapsed";
	}

	private void Update()
	{
		using var db = DbContext.CreateDbContext();

		_childs = db.Comments
			.Include(c => c.Childs)
				.ThenInclude(c => c.Creator)
			.First(c => c.Id == CommentModel.Id).Childs.ToList();

		_cfClass = "hidden";

		StateHasChanged();
	}
}
