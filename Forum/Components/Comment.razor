@using Microsoft.EntityFrameworkCore
@* ReSharper disable once InconsistentNaming *@
@inject IDbContextFactory<Model.Database> DbContext

<style>
	.border-left {
		border-left: 2px solid #ebdbb2 !important;
		border-radius: 0;
	}

	.collapsed {
		padding: 0 0.5rem !important;
		color: gray;
	}

		.collapsed span {
			display: none;
		}

	.btn-w-auto {
		width: auto !important;
	}
</style>

<div class="main needs-padding border-left @_collapseClass">
	<p class="p-annotation-sm">
		<a href="/user/@CommentModel.Creator.AccountName">@CommentModel.Creator.AccountName</a>
		@CommentModel.Created.ToString("t"), @CommentModel.Created.ToString("d")
		<button class="btn-mini btn-w-auto" @onclick="Collapse">[@_clpMsg]</button>
		@* <button class="btn-mini btn-w-auto" @onclick="Collapse">[@CommentModel.CountChildren]</button>*@
	</p>
	<span>
		<MarkdownView Content="@CommentModel.Text" />
		<button class="btn-mini btn-w-auto" @onclick="ToggleCommentField">Answer</button>
		@if (_showCommentField)
		{
			<CommentField Thread="@CommentModel.Thread" Comment="@CommentModel" UpdateHandler="UpdateHandlerComponent"/>
		}

		@* ReSharper disable once UnusedVariable *@
		@if (CommentModel.Childs is not null)
		{
			// Don't load if number of parents is too big.
			@if (CommentModel.CountParents > LoadPerm)
			{
				<p @onclick="LoadMore" class="shiny p-annotation-sm">Load @(CommentModel.CountChildren > 10 ? 10 : CommentModel.CountChildren - 1) more comment(s).</p>
			}
			else
			{
				@foreach (var c in CommentModel.Childs)
				{
					<Comment CommentModel="c" UpdateHandler="UpdateHandler" LoadPerm="LoadPerm"/>
				}
			}
		}
		
		@*@if (_children is not null)
		{
			@foreach (var c in _children)
			{
				<Comment CommentModel="c" UpdateHandler="UpdateHandler"/>
			}
			<p @onclick="LoadMore" class="shiny p-annotation-sm">Load more comments.</p>
		}*@
	</span>
</div>

@code {
	//private List<Entity.Comment> _children = new(); 
	private bool _showCommentField = false;
	private string _collapseClass = "";
	private string _clpMsg = "-";

	[Parameter]
	public Entity.Comment CommentModel { get; set; }
	
	[Parameter]
	public CommentField.Update UpdateHandler { get; set; }

	[Parameter]
	public int LoadPerm { get; set; } = 10-1;

	/*protected override async Task OnInitializedAsync()
	{
		ReloadComments();
	}*/

	/// <summary>
	/// Toggles visibility of the comment field.
	/// </summary>
	private void ToggleCommentField()
	{
		_showCommentField = !_showCommentField;
		StateHasChanged();
	}

	/// <summary>
	/// Hide the comment field.
	/// </summary>
	private void CloseCommentField()
	{
		_showCommentField = false;
	}

	/// <summary>
	/// Show the comment field.
	/// </summary>
	private void OpenCommentField()
	{
		_showCommentField = true;
	}

	/// <summary>
	/// Collapses the comment.
	/// </summary>
	private void Collapse()
	{
		if ("collapsed" == _collapseClass)
		{
			_collapseClass = "";
			_clpMsg = "-";
		}
		else
		{
			_collapseClass = "collapsed";
			_clpMsg = CommentModel.CountChildren + " more";
		}
	}

	/// <summary>
	/// Update the comment/thread.
	/// </summary>
	private async Task UpdateHandlerComponent()
	{
		CloseCommentField(); // Add our own action to the update handler
		await UpdateHandler(); // Propagate event to parent
	}

	/// <summary>
	/// Load more child comments.
	/// </summary>
	private void LoadMore()
	{
		LoadPerm += 10;
	}

	/*/// <summary>
	/// Reload all currently loaded comments. If there are non, load the first 20.
	/// </summary>
	private void ReloadComments()
	{
		if (CommentModel.Childs is null || !CommentModel.Childs.Any()) return;
		
		var last = _children.LastOrDefault()?.Created;

		if (last is null)
		{ // When there are no comments yet, simply load the first 20.
			_children = CommentModel.Childs
				.OrderBy(c => c.Created)
				.Take(20)
				.ToList();
		}
		else
		{ // When there already are comments, load all of them again.
			_children = CommentModel.Childs
				.OrderBy(c => c.Created)
				.Where(c => c.Created <= last)
				.ToList();
		}
	}

	/// <summary>
	/// Load the next 20 comments.
	/// </summary>
	private void LoadMore()
	{
		if (CommentModel.Childs is null || !CommentModel.Childs.Any()) return;
		
		var lastAfterReload = _children.LastOrDefault()?.Created;

		if (lastAfterReload is null) return;

		// Add the next 20 comments
		_children.AddRange(CommentModel.Childs
			.OrderBy(c => c.Created)
			.Where(c => c.Created > lastAfterReload)
			.Take(20)
			.ToList()
			);

		StateHasChanged();
	}*/
}
