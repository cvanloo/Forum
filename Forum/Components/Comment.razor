@using Microsoft.EntityFrameworkCore
@* ReSharper disable once InconsistentNaming *@
@inject IDbContextFactory<Model.Database> DbContext

<style>
	.border-left {
		border-left: 2px solid #ebdbb2 !important;
		border-radius: 0;
	}

	.collapsed {
		padding: 0 0.5rem !important;
		color: gray;
	}

		.collapsed span {
			display: none;
		}

	.btn-w-auto {
		width: auto !important;
	}
</style>

<div class="main needs-padding border-left @_collapseClass">
	<p class="p-annotation-sm">
		<a href="/user/@CommentModel.Creator.AccountName">@CommentModel.Creator.AccountName</a>
		@CommentModel.Created.ToString("t"), @CommentModel.Created.ToString("d")
		<button class="btn-mini btn-w-auto" @onclick="Collapse">[@_clpMsg]</button>
		@* <button class="btn-mini btn-w-auto" @onclick="Collapse">[@CommentModel.CountChildren]</button>*@
	</p>
	<span>
		<MarkdownView Content="@CommentModel.Text" />
		<button class="btn-mini btn-w-auto" @onclick="ToggleCommentField">Answer</button>
		<div class="@_cfClass">
			<CommentField Thread="@CommentModel.Thread" Comment="@CommentModel" UpdateHandler="UpdateHandler"/>
		</div>

		@* ReSharper disable once UnusedVariable *@
		@if (CommentModel.Childs is not null)
		{
			@foreach (var c in CommentModel.Childs)
			{
				<Comment CommentModel="c" UpdateHandler="UpdateHandler" />
			}
		}
	</span>
</div>

@code {
	private string _cfClass = "hidden";
	private string _collapseClass = "";
	private string _clpMsg = "-";

	[Parameter]
	public Entity.Comment CommentModel { get; set; }
	
	[Parameter]
	public CommentField.Update UpdateHandler { get; set; }

	/// <summary>
	/// Toggles visibility of the comment field.
	/// </summary>
	private void ToggleCommentField()
	{
		if ("" == _cfClass)
			CloseCommentField();
		else
			OpenCommentField();
	}

	/// <summary>
	/// Hide the comment field.
	/// </summary>
	private void CloseCommentField()
	{
		_cfClass = "hidden";
	}

	/// <summary>
	/// Show the comment field.
	/// </summary>
	private void OpenCommentField()
	{
		_cfClass = "";
	}

	/// <summary>
	/// Collapses the comment.
	/// </summary>
	private void Collapse()
	{
		if ("collapsed" == _collapseClass)
		{
			_collapseClass = "";
			_clpMsg = "-";
		}
		else
		{
			_collapseClass = "collapsed";
			_clpMsg = CommentModel.CountChildren + " more";
		}
	}

	/// <summary>
	/// Invoked after each time the component has been rendered.
	/// </summary>
	protected override void OnAfterRender(bool firstRender)
	{
		// After the user commented, the `CommentField` will call the `UpdateHandler` from
		// the `Thread` the comment belongs to. This will update the entire `Thread`.
		// Make sure to close the `CommentField` after the user commented.
		CloseCommentField();
		
		base.OnAfterRender(firstRender);
	}
}
