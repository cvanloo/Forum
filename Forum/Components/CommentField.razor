@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<Model.Database> DbContext

<style>
	.form-control {
		background: #333844 !important;
		margin: 0;
	}
</style>

<input @onfocusin="Activate" @onfocusout="Deactivate" type="text" class="form-control" placeholder="Write a comment" @bind-value="@_comment" />
<button @onclick="CreateComment" type="submit" class="form-control" style="@btnStyle">Comment</button>

@code {
	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }

	[Parameter]
	public int ThreadId { get; set; }

	[Parameter]
	public int? ParentId { get; set; }

	private string _comment;
	private string btnStyle = "display: none;";

	private void Activate()
	{
		btnStyle = "";
	}

	private async void Deactivate()
	{
		System.Threading.Thread.Sleep(100);
		btnStyle = "display: none;";
	}

	private async void CreateComment()
	{
		if (string.IsNullOrEmpty(_comment)) return;

		var authenticationState = await authenticationStateTask;
		using var db = DbContext.CreateDbContext();

		Entity.User user = db.Users.First(u => u.AccountName == authenticationState.User.Identity.Name);

		Entity.Comment comment = new Entity.Comment()
		{
			Creator = user,
			Text = _comment,
			ParentId = ParentId
		};

		await db.Comments.AddAsync(comment);

		Entity.Thread thread = db.Threads
			.Include(t => t.Comments)
			.First(t => t.Id == ThreadId);

		thread.Comments.Add(comment);

		await db.SaveChangesAsync();
	}
}
