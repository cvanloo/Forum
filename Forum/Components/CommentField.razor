@using Microsoft.EntityFrameworkCore

<style>
	.form-control {
		background: #333844 !important;
		margin: 0;
	}
</style>

<input @onfocusin="Activate" @onfocusout="Deactivate" type="text" class="form-control" placeholder="Write a comment" @bind-value="@_comment" />
<button @onclick="CreateComment" type="submit" class="form-control" style="@_btnStyle">Comment</button>

@code {
	[Parameter]
	public Entity.Thread Thread { get; set; }
	
	[Parameter]
	public Entity.Comment Comment { get; set; }

	[CascadingParameter]
	private Task<AuthenticationState> AuthenticationStateTask { get; set; }

	[CascadingParameter]
	private Model.Database DbContext { get; set; }

	private string _comment;
	private string _btnStyle = "display: none;";

	private void Activate()
	{
		_btnStyle = "";
	}

	private void Deactivate()
	{
		// TODO: Fix: Without sleep the button disappears before the 'button-pressed'-event can be registered.
		System.Threading.Thread.Sleep(100);
		_btnStyle = "display: none;";
	}

	private async void CreateComment()
	{
		if (string.IsNullOrEmpty(_comment)) return;

		var authState = await AuthenticationStateTask;
		var user = DbContext.Users.First(u => u.AccountName == authState.User.Identity.Name);

		var comment = new Entity.Comment
		{
			Creator = user,
			Text = _comment,
			Parent = Comment
		};

		await DbContext.Comments.AddAsync(comment);
		Thread.Comments.Add(comment);

		await DbContext.SaveChangesAsync();

		_comment = null;
		
		// TODO: Update page; We need to update our parent, not our child elements
		StateHasChanged();
	}
}
