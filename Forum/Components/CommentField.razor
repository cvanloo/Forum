@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@* ReSharper disable once InconsistentNaming *@
@inject IDbContextFactory<Model.Database> DbContext

<style>
	#comment-textarea {
		margin: 0;
		height: 7em !important;
	}
	
	#comment-button {
		margin-top: 0.5em;
	}
</style>

@* <input @onfocusin="Activate" @onfocusout="Deactivate" type="text" class="form-control" placeholder="Write a comment" @bind-value="@_comment" /> *@
<textarea id="comment-textarea" class="form-control" placeholder="Write a comment..." @bind="@_comment"></textarea>
<button id="comment-button" @onclick="CreateCommentAsync" type="submit" class="form-control" style="margin: 0.5rem 0;">Comment</button>

@code {
	/* Delegate: A type that represents references to methods with particular parameters and return type. Any method
	 * that matches the parameters and return type can be assigned to it. The assigned method can then be invoked/called
	 * through the delegate instance.
	 * A delegate object represents both, the method to call and the instance to call it upon.
	 */
	public delegate Task Update();
	
	private string _comment;
	
	[Parameter]
	public Entity.Thread Thread { get; set; }
	
	[Parameter]
	public Entity.Comment Comment { get; set; }
	
	// In order to update the view and display the new comment, we take a function here that allows us to notify/update
	// the parent element.
	[Parameter]
	public Update UpdateHandler { get; set; }

	[CascadingParameter]
	private Task<AuthenticationState> AuthenticationStateTask { get; set; }
	
	/// <summary>
	/// Creates and stores a comment in the database.
	/// </summary>
	private async Task CreateCommentAsync()
	{
		if (Thread.IsDeleted || string.IsNullOrEmpty(_comment)) return;

		var authState = await AuthenticationStateTask;
		await using var dbContext = DbContext.CreateDbContext();
		
		var user = dbContext.Users.First(u => u.AccountName == authState.User.Identity.Name);
		
		// Get the parent comment from the same db context
		var parentComment = Comment is null ? null : dbContext.Comments.First(c => c.Id == Comment.Id);
		
		// Get the thread from the same db context
		var thread = dbContext.Threads.First(t => t.Id == Thread.Id);

		var comment = new Entity.Comment
		{
			Creator = user,
			Text = _comment,
			Parent = parentComment,
			Thread = thread
		};

		await dbContext.Comments.AddAsync(comment);

		try
		{
			await dbContext.SaveChangesAsync();
		}
		catch (DbUpdateException dbuEx)
		{
			await Console.Error.WriteLineAsync(dbuEx.ToString());

			return;
		}

		_comment = null;
		
		// Update page; We need to update our parent, not our child elements
		await UpdateHandler();
	}
}
