@using System.Timers 
@* ReSharper disable once InconsistentNaming *@
@inject Data.InfoMessage MessageService
@implements IDisposable

<style>
	#helper-container {
		position: fixed;
		bottom: 5%; right: 0; left: 0;
		margin: auto;
		width: 25rem;
		height: 5rem;
		line-height: 5rem;
		text-align: center;

		background: #282828;
		color: #ebdbb2;
		border: 2px solid #98971A;
	}

	#txt-span {
		display: inline-block;
		vertical-align: middle;
		line-height: normal;
	}
</style>

@if (!string.IsNullOrWhiteSpace(_message))
{
	<div id="helper-container" @onclick="Close">
		<span id="txt-span">@_message</span>
	</div>
}

@code {
	private string _message;
	private Timer _timer;

	/// <summary>
	/// Initializes the component.
	/// </summary>
	protected override void OnInitialized()
	{
		MessageService.MessageEvent += () =>
		{
			InvokeAsync(() =>
			{
				_message = MessageService.Message;
				Show();
			});
		};

		_timer = new Timer(2500);
		_timer.AutoReset = false;
		_timer.Elapsed += (_, _) =>
		{
			InvokeAsync(Hide); // The timer will invoke elapsed only once (AutoReset = false),
							   // therefore we don't need to call Stop() on it.
		};
	}

	/// <summary>
	/// Displays the component.
	/// </summary>
	private void Show()
	{
		StateHasChanged();
		try { _timer?.Start(); } catch (ObjectDisposedException) { }
	}

	/// <summary>
	/// Hides the component.
	/// </summary>
	private void Hide()
	{
		_message = null;
		StateHasChanged();
	}

	/// <summary>
	/// Hides the component and stops the timer.
	/// </summary>
	private void Close()
	{
		_message = null;
		_timer?.Stop(); // This probably happens before elapsed is called, so we need to stop the timer.
	}

	/// <summary>
	/// Dispose: Clean up.
	/// </summary>
	public void Dispose()
	{
		_timer?.Dispose();
	}
}
